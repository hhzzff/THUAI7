// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Server.proto

#include "Message2Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf
{
    PROTOBUF_CONSTEXPR NullRequest::NullRequest(
        ::_pbi::ConstantInitialized
    )
    {
    }
    struct NullRequestDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR NullRequestDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~NullRequestDefaultTypeInternal()
        {
        }
        union
        {
            NullRequest _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NullRequestDefaultTypeInternal _NullRequest_default_instance_;
    PROTOBUF_CONSTEXPR IDMsg::IDMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct IDMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR IDMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~IDMsgDefaultTypeInternal()
        {
        }
        union
        {
            IDMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IDMsgDefaultTypeInternal _IDMsg_default_instance_;
    PROTOBUF_CONSTEXPR PlayerMsg::PlayerMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.ship_type_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct PlayerMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR PlayerMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~PlayerMsgDefaultTypeInternal()
        {
        }
        union
        {
            PlayerMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMsgDefaultTypeInternal _PlayerMsg_default_instance_;
    PROTOBUF_CONSTEXPR MoveMsg::MoveMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.angle_)*/ 0, /*decltype(_impl_.time_in_milliseconds_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MoveMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MoveMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MoveMsgDefaultTypeInternal()
        {
        }
        union
        {
            MoveMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveMsgDefaultTypeInternal _MoveMsg_default_instance_;
    PROTOBUF_CONSTEXPR SendMsg::SendMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.to_player_id_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.message_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}}
    {
    }
    struct SendMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR SendMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~SendMsgDefaultTypeInternal()
        {
        }
        union
        {
            SendMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMsgDefaultTypeInternal _SendMsg_default_instance_;
    PROTOBUF_CONSTEXPR AttackMsg::AttackMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.angle_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct AttackMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR AttackMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~AttackMsgDefaultTypeInternal()
        {
        }
        union
        {
            AttackMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttackMsgDefaultTypeInternal _AttackMsg_default_instance_;
    PROTOBUF_CONSTEXPR ConstructMsg::ConstructMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.construction_type_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct ConstructMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR ConstructMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~ConstructMsgDefaultTypeInternal()
        {
        }
        union
        {
            ConstructMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstructMsgDefaultTypeInternal _ConstructMsg_default_instance_;
    PROTOBUF_CONSTEXPR RecoverMsg::RecoverMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.recover_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct RecoverMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR RecoverMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~RecoverMsgDefaultTypeInternal()
        {
        }
        union
        {
            RecoverMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoverMsgDefaultTypeInternal _RecoverMsg_default_instance_;
    PROTOBUF_CONSTEXPR InstallMsg::InstallMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.module_type_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct InstallMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR InstallMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~InstallMsgDefaultTypeInternal()
        {
        }
        union
        {
            InstallMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallMsgDefaultTypeInternal _InstallMsg_default_instance_;
    PROTOBUF_CONSTEXPR BuildShipMsg::BuildShipMsg(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.ship_type_)*/ 0, /*decltype(_impl_.birthpoint_index_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct BuildShipMsgDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR BuildShipMsgDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~BuildShipMsgDefaultTypeInternal()
        {
        }
        union
        {
            BuildShipMsg _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildShipMsgDefaultTypeInternal _BuildShipMsg_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_Message2Server_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message2Server_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message2Server_2eproto = nullptr;

const uint32_t TableStruct_Message2Server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::NullRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::IDMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::IDMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::IDMsg, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::PlayerMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::PlayerMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::PlayerMsg, _impl_.team_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::PlayerMsg, _impl_.ship_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveMsg, _impl_.angle_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveMsg, _impl_.time_in_milliseconds_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveMsg, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::SendMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::protobuf::SendMsg, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::SendMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::SendMsg, _impl_.to_player_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::protobuf::SendMsg, _impl_.team_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::SendMsg, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::AttackMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::AttackMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::AttackMsg, _impl_.angle_),
    PROTOBUF_FIELD_OFFSET(::protobuf::AttackMsg, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::ConstructMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::ConstructMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::ConstructMsg, _impl_.construction_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::ConstructMsg, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::RecoverMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::RecoverMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::RecoverMsg, _impl_.recover_),
    PROTOBUF_FIELD_OFFSET(::protobuf::RecoverMsg, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::InstallMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::InstallMsg, _impl_.module_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::InstallMsg, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::InstallMsg, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::BuildShipMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::BuildShipMsg, _impl_.ship_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::BuildShipMsg, _impl_.team_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::BuildShipMsg, _impl_.birthpoint_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::protobuf::NullRequest)},
    {6, -1, -1, sizeof(::protobuf::IDMsg)},
    {14, -1, -1, sizeof(::protobuf::PlayerMsg)},
    {23, -1, -1, sizeof(::protobuf::MoveMsg)},
    {33, -1, -1, sizeof(::protobuf::SendMsg)},
    {45, -1, -1, sizeof(::protobuf::AttackMsg)},
    {54, -1, -1, sizeof(::protobuf::ConstructMsg)},
    {63, -1, -1, sizeof(::protobuf::RecoverMsg)},
    {72, -1, -1, sizeof(::protobuf::InstallMsg)},
    {81, -1, -1, sizeof(::protobuf::BuildShipMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_NullRequest_default_instance_._instance,
    &::protobuf::_IDMsg_default_instance_._instance,
    &::protobuf::_PlayerMsg_default_instance_._instance,
    &::protobuf::_MoveMsg_default_instance_._instance,
    &::protobuf::_SendMsg_default_instance_._instance,
    &::protobuf::_AttackMsg_default_instance_._instance,
    &::protobuf::_ConstructMsg_default_instance_._instance,
    &::protobuf::_RecoverMsg_default_instance_._instance,
    &::protobuf::_InstallMsg_default_instance_._instance,
    &::protobuf::_BuildShipMsg_default_instance_._instance,
};

const char descriptor_table_protodef_Message2Server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\024Message2Server.proto\022\010protobuf\032\021Messag"
    "eType.proto\"\r\n\013NullRequest\"+\n\005IDMsg\022\021\n\tp"
    "layer_id\030\001 \001(\003\022\017\n\007team_id\030\002 \001(\003\"V\n\tPlaye"
    "rMsg\022\021\n\tplayer_id\030\001 \001(\003\022\017\n\007team_id\030\002 \001(\003"
    "\022%\n\tship_type\030\003 \001(\0162\022.protobuf.ShipType\""
    "Z\n\007MoveMsg\022\021\n\tplayer_id\030\001 \001(\003\022\r\n\005angle\030\002"
    " \001(\001\022\034\n\024time_in_milliseconds\030\003 \001(\003\022\017\n\007te"
    "am_id\030\004 \001(\003\"\200\001\n\007SendMsg\022\021\n\tplayer_id\030\001 \001"
    "(\003\022\024\n\014to_player_id\030\002 \001(\003\022\026\n\014text_message"
    "\030\003 \001(\tH\000\022\030\n\016binary_message\030\004 \001(\014H\000\022\017\n\007te"
    "am_id\030\005 \001(\003B\t\n\007message\">\n\tAttackMsg\022\021\n\tp"
    "layer_id\030\001 \001(\003\022\r\n\005angle\030\002 \001(\001\022\017\n\007team_id"
    "\030\003 \001(\003\"i\n\014ConstructMsg\022\021\n\tplayer_id\030\001 \001("
    "\003\0225\n\021construction_type\030\002 \001(\0162\032.protobuf."
    "ConstructionType\022\017\n\007team_id\030\003 \001(\003\"A\n\nRec"
    "overMsg\022\021\n\tplayer_id\030\001 \001(\003\022\017\n\007recover\030\002 "
    "\001(\003\022\017\n\007team_id\030\003 \001(\003\"[\n\nInstallMsg\022)\n\013mo"
    "dule_type\030\001 \001(\0162\024.protobuf.ModuleType\022\021\n"
    "\tplayer_id\030\002 \001(\003\022\017\n\007team_id\030\003 \001(\003\"`\n\014Bui"
    "ldShipMsg\022%\n\tship_type\030\001 \001(\0162\022.protobuf."
    "ShipType\022\017\n\007team_id\030\002 \001(\003\022\030\n\020birthpoint_"
    "index\030\003 \001(\005b\006proto3";
static const ::_pbi::DescriptorTable* const descriptor_table_Message2Server_2eproto_deps[1] = {
    &::descriptor_table_MessageType_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message2Server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message2Server_2eproto = {
    false,
    false,
    859,
    descriptor_table_protodef_Message2Server_2eproto,
    "Message2Server.proto",
    &descriptor_table_Message2Server_2eproto_once,
    descriptor_table_Message2Server_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_Message2Server_2eproto::offsets,
    file_level_metadata_Message2Server_2eproto,
    file_level_enum_descriptors_Message2Server_2eproto,
    file_level_service_descriptors_Message2Server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message2Server_2eproto_getter()
{
    return &descriptor_table_Message2Server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message2Server_2eproto(&descriptor_table_Message2Server_2eproto);
namespace protobuf
{

    // ===================================================================

    class NullRequest::_Internal
    {
    public:
    };

    NullRequest::NullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned)
    {
        // @@protoc_insertion_point(arena_constructor:protobuf.NullRequest)
    }
    NullRequest::NullRequest(const NullRequest& from) :
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase()
    {
        NullRequest* const _this = this;
        (void)_this;
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.NullRequest)
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NullRequest::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
        ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* NullRequest::GetClassData() const
    {
        return &_class_data_;
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata NullRequest::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[0]
        );
    }

    // ===================================================================

    class IDMsg::_Internal
    {
    public:
    };

    IDMsg::IDMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.IDMsg)
    }
    IDMsg::IDMsg(const IDMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        IDMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.team_id_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        // @@protoc_insertion_point(copy_constructor:protobuf.IDMsg)
    }

    inline void IDMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    IDMsg::~IDMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.IDMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void IDMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void IDMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void IDMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.IDMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* IDMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* IDMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.IDMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // int64 team_id = 2;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.IDMsg)
        return target;
    }

    size_t IDMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.IDMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 team_id = 2;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IDMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        IDMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* IDMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void IDMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<IDMsg*>(&to_msg);
        auto& from = static_cast<const IDMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.IDMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void IDMsg::CopyFrom(const IDMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.IDMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool IDMsg::IsInitialized() const
    {
        return true;
    }

    void IDMsg::InternalSwap(IDMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(IDMsg, _impl_.team_id_) + sizeof(IDMsg::_impl_.team_id_) - PROTOBUF_FIELD_OFFSET(IDMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata IDMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[1]
        );
    }

    // ===================================================================

    class PlayerMsg::_Internal
    {
    public:
    };

    PlayerMsg::PlayerMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.PlayerMsg)
    }
    PlayerMsg::PlayerMsg(const PlayerMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        PlayerMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.team_id_){}, decltype(_impl_.ship_type_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ship_type_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.ship_type_));
        // @@protoc_insertion_point(copy_constructor:protobuf.PlayerMsg)
    }

    inline void PlayerMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.ship_type_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    PlayerMsg::~PlayerMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.PlayerMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void PlayerMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void PlayerMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void PlayerMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.PlayerMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ship_type_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.ship_type_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* PlayerMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ShipType ship_type = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_ship_type(static_cast<::protobuf::ShipType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* PlayerMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.PlayerMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // int64 team_id = 2;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_team_id(), target);
        }

        // .protobuf.ShipType ship_type = 3;
        if (this->_internal_ship_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this->_internal_ship_type(), target
            );
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.PlayerMsg)
        return target;
    }

    size_t PlayerMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.PlayerMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 team_id = 2;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // .protobuf.ShipType ship_type = 3;
        if (this->_internal_ship_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_ship_type());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        PlayerMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* PlayerMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void PlayerMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<PlayerMsg*>(&to_msg);
        auto& from = static_cast<const PlayerMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.PlayerMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_ship_type() != 0)
        {
            _this->_internal_set_ship_type(from._internal_ship_type());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void PlayerMsg::CopyFrom(const PlayerMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.PlayerMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool PlayerMsg::IsInitialized() const
    {
        return true;
    }

    void PlayerMsg::InternalSwap(PlayerMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(PlayerMsg, _impl_.ship_type_) + sizeof(PlayerMsg::_impl_.ship_type_) - PROTOBUF_FIELD_OFFSET(PlayerMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata PlayerMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[2]
        );
    }

    // ===================================================================

    class MoveMsg::_Internal
    {
    public:
    };

    MoveMsg::MoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MoveMsg)
    }
    MoveMsg::MoveMsg(const MoveMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MoveMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.angle_){}, decltype(_impl_.time_in_milliseconds_){}, decltype(_impl_.team_id_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MoveMsg)
    }

    inline void MoveMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.angle_){0}, decltype(_impl_.time_in_milliseconds_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MoveMsg::~MoveMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.MoveMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MoveMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MoveMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MoveMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MoveMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MoveMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double angle = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17))
                    {
                        _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 time_in_milliseconds = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.time_in_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MoveMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MoveMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // double angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_angle = this->_internal_angle();
        uint64_t raw_angle;
        memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
        if (raw_angle != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle(), target);
        }

        // int64 time_in_milliseconds = 3;
        if (this->_internal_time_in_milliseconds() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_in_milliseconds(), target);
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MoveMsg)
        return target;
    }

    size_t MoveMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MoveMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // double angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_angle = this->_internal_angle();
        uint64_t raw_angle;
        memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
        if (raw_angle != 0)
        {
            total_size += 1 + 8;
        }

        // int64 time_in_milliseconds = 3;
        if (this->_internal_time_in_milliseconds() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_in_milliseconds());
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MoveMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MoveMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void MoveMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MoveMsg*>(&to_msg);
        auto& from = static_cast<const MoveMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MoveMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_angle = from._internal_angle();
        uint64_t raw_angle;
        memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
        if (raw_angle != 0)
        {
            _this->_internal_set_angle(from._internal_angle());
        }
        if (from._internal_time_in_milliseconds() != 0)
        {
            _this->_internal_set_time_in_milliseconds(from._internal_time_in_milliseconds());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MoveMsg::CopyFrom(const MoveMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MoveMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MoveMsg::IsInitialized() const
    {
        return true;
    }

    void MoveMsg::InternalSwap(MoveMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MoveMsg, _impl_.team_id_) + sizeof(MoveMsg::_impl_.team_id_) - PROTOBUF_FIELD_OFFSET(MoveMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MoveMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[3]
        );
    }

    // ===================================================================

    class SendMsg::_Internal
    {
    public:
    };

    SendMsg::SendMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.SendMsg)
    }
    SendMsg::SendMsg(const SendMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        SendMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.to_player_id_){}, decltype(_impl_.team_id_){}, decltype(_impl_.message_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        clear_has_message();
        switch (from.message_case())
        {
            case kTextMessage:
                {
                    _this->_internal_set_text_message(from._internal_text_message());
                    break;
                }
            case kBinaryMessage:
                {
                    _this->_internal_set_binary_message(from._internal_binary_message());
                    break;
                }
            case MESSAGE_NOT_SET:
                {
                    break;
                }
        }
        // @@protoc_insertion_point(copy_constructor:protobuf.SendMsg)
    }

    inline void SendMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.to_player_id_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.message_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};
        clear_has_message();
    }

    SendMsg::~SendMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.SendMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void SendMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (has_message())
        {
            clear_message();
        }
    }

    void SendMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void SendMsg::clear_message()
    {
        // @@protoc_insertion_point(one_of_clear_start:protobuf.SendMsg)
        switch (message_case())
        {
            case kTextMessage:
                {
                    _impl_.message_.text_message_.Destroy();
                    break;
                }
            case kBinaryMessage:
                {
                    _impl_.message_.binary_message_.Destroy();
                    break;
                }
            case MESSAGE_NOT_SET:
                {
                    break;
                }
        }
        _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
    }

    void SendMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.SendMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        clear_message();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* SendMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 to_player_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.to_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // string text_message = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        auto str = _internal_mutable_text_message();
                        ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(ptr);
                        CHK_(::_pbi::VerifyUTF8(str, "protobuf.SendMsg.text_message"));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bytes binary_message = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                    {
                        auto str = _internal_mutable_binary_message();
                        ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* SendMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.SendMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // int64 to_player_id = 2;
        if (this->_internal_to_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_to_player_id(), target);
        }

        // string text_message = 3;
        if (_internal_has_text_message())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_text_message().data(), static_cast<int>(this->_internal_text_message().length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "protobuf.SendMsg.text_message"
            );
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_text_message(), target
            );
        }

        // bytes binary_message = 4;
        if (_internal_has_binary_message())
        {
            target = stream->WriteBytesMaybeAliased(
                4, this->_internal_binary_message(), target
            );
        }

        // int64 team_id = 5;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.SendMsg)
        return target;
    }

    size_t SendMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.SendMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 to_player_id = 2;
        if (this->_internal_to_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_to_player_id());
        }

        // int64 team_id = 5;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        switch (message_case())
        {
            // string text_message = 3;
            case kTextMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_text_message()
                                  );
                    break;
                }
            // bytes binary_message = 4;
            case kBinaryMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_binary_message()
                                  );
                    break;
                }
            case MESSAGE_NOT_SET:
                {
                    break;
                }
        }
        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        SendMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* SendMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void SendMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<SendMsg*>(&to_msg);
        auto& from = static_cast<const SendMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.SendMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_to_player_id() != 0)
        {
            _this->_internal_set_to_player_id(from._internal_to_player_id());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        switch (from.message_case())
        {
            case kTextMessage:
                {
                    _this->_internal_set_text_message(from._internal_text_message());
                    break;
                }
            case kBinaryMessage:
                {
                    _this->_internal_set_binary_message(from._internal_binary_message());
                    break;
                }
            case MESSAGE_NOT_SET:
                {
                    break;
                }
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void SendMsg::CopyFrom(const SendMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.SendMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool SendMsg::IsInitialized() const
    {
        return true;
    }

    void SendMsg::InternalSwap(SendMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(SendMsg, _impl_.team_id_) + sizeof(SendMsg::_impl_.team_id_) - PROTOBUF_FIELD_OFFSET(SendMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
        swap(_impl_.message_, other->_impl_.message_);
        swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata SendMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[4]
        );
    }

    // ===================================================================

    class AttackMsg::_Internal
    {
    public:
    };

    AttackMsg::AttackMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.AttackMsg)
    }
    AttackMsg::AttackMsg(const AttackMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        AttackMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.angle_){}, decltype(_impl_.team_id_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        // @@protoc_insertion_point(copy_constructor:protobuf.AttackMsg)
    }

    inline void AttackMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.angle_){0}, decltype(_impl_.team_id_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    AttackMsg::~AttackMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.AttackMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void AttackMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void AttackMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void AttackMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.AttackMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* AttackMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double angle = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17))
                    {
                        _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* AttackMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.AttackMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // double angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_angle = this->_internal_angle();
        uint64_t raw_angle;
        memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
        if (raw_angle != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle(), target);
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.AttackMsg)
        return target;
    }

    size_t AttackMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.AttackMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // double angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_angle = this->_internal_angle();
        uint64_t raw_angle;
        memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
        if (raw_angle != 0)
        {
            total_size += 1 + 8;
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttackMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        AttackMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* AttackMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void AttackMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<AttackMsg*>(&to_msg);
        auto& from = static_cast<const AttackMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.AttackMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_angle = from._internal_angle();
        uint64_t raw_angle;
        memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
        if (raw_angle != 0)
        {
            _this->_internal_set_angle(from._internal_angle());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void AttackMsg::CopyFrom(const AttackMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.AttackMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool AttackMsg::IsInitialized() const
    {
        return true;
    }

    void AttackMsg::InternalSwap(AttackMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(AttackMsg, _impl_.team_id_) + sizeof(AttackMsg::_impl_.team_id_) - PROTOBUF_FIELD_OFFSET(AttackMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata AttackMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[5]
        );
    }

    // ===================================================================

    class ConstructMsg::_Internal
    {
    public:
    };

    ConstructMsg::ConstructMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.ConstructMsg)
    }
    ConstructMsg::ConstructMsg(const ConstructMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        ConstructMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.team_id_){}, decltype(_impl_.construction_type_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.construction_type_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.construction_type_));
        // @@protoc_insertion_point(copy_constructor:protobuf.ConstructMsg)
    }

    inline void ConstructMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.construction_type_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    ConstructMsg::~ConstructMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.ConstructMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void ConstructMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void ConstructMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void ConstructMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.ConstructMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.construction_type_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.construction_type_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* ConstructMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ConstructionType construction_type = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_construction_type(static_cast<::protobuf::ConstructionType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* ConstructMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.ConstructMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // .protobuf.ConstructionType construction_type = 2;
        if (this->_internal_construction_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this->_internal_construction_type(), target
            );
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.ConstructMsg)
        return target;
    }

    size_t ConstructMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.ConstructMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // .protobuf.ConstructionType construction_type = 2;
        if (this->_internal_construction_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_construction_type());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstructMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        ConstructMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* ConstructMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void ConstructMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<ConstructMsg*>(&to_msg);
        auto& from = static_cast<const ConstructMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ConstructMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_construction_type() != 0)
        {
            _this->_internal_set_construction_type(from._internal_construction_type());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void ConstructMsg::CopyFrom(const ConstructMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ConstructMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool ConstructMsg::IsInitialized() const
    {
        return true;
    }

    void ConstructMsg::InternalSwap(ConstructMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(ConstructMsg, _impl_.construction_type_) + sizeof(ConstructMsg::_impl_.construction_type_) - PROTOBUF_FIELD_OFFSET(ConstructMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata ConstructMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[6]
        );
    }

    // ===================================================================

    class RecoverMsg::_Internal
    {
    public:
    };

    RecoverMsg::RecoverMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.RecoverMsg)
    }
    RecoverMsg::RecoverMsg(const RecoverMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        RecoverMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.recover_){}, decltype(_impl_.team_id_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        // @@protoc_insertion_point(copy_constructor:protobuf.RecoverMsg)
    }

    inline void RecoverMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.recover_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    RecoverMsg::~RecoverMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.RecoverMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void RecoverMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void RecoverMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void RecoverMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.RecoverMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.team_id_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* RecoverMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 player_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 recover = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.recover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* RecoverMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.RecoverMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
        }

        // int64 recover = 2;
        if (this->_internal_recover() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_recover(), target);
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.RecoverMsg)
        return target;
    }

    size_t RecoverMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.RecoverMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 1;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 recover = 2;
        if (this->_internal_recover() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_recover());
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoverMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        RecoverMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* RecoverMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void RecoverMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<RecoverMsg*>(&to_msg);
        auto& from = static_cast<const RecoverMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RecoverMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_recover() != 0)
        {
            _this->_internal_set_recover(from._internal_recover());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void RecoverMsg::CopyFrom(const RecoverMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RecoverMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool RecoverMsg::IsInitialized() const
    {
        return true;
    }

    void RecoverMsg::InternalSwap(RecoverMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(RecoverMsg, _impl_.team_id_) + sizeof(RecoverMsg::_impl_.team_id_) - PROTOBUF_FIELD_OFFSET(RecoverMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata RecoverMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[7]
        );
    }

    // ===================================================================

    class InstallMsg::_Internal
    {
    public:
    };

    InstallMsg::InstallMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.InstallMsg)
    }
    InstallMsg::InstallMsg(const InstallMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        InstallMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){}, decltype(_impl_.team_id_){}, decltype(_impl_.module_type_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.player_id_, &from._impl_.player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.module_type_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.module_type_));
        // @@protoc_insertion_point(copy_constructor:protobuf.InstallMsg)
    }

    inline void InstallMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.module_type_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    InstallMsg::~InstallMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.InstallMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void InstallMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void InstallMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void InstallMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.InstallMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.module_type_) - reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.module_type_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* InstallMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.ModuleType module_type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_module_type(static_cast<::protobuf::ModuleType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* InstallMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.InstallMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.ModuleType module_type = 1;
        if (this->_internal_module_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_module_type(), target
            );
        }

        // int64 player_id = 2;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.InstallMsg)
        return target;
    }

    size_t InstallMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.InstallMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 player_id = 2;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 team_id = 3;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // .protobuf.ModuleType module_type = 1;
        if (this->_internal_module_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_module_type());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        InstallMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* InstallMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void InstallMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<InstallMsg*>(&to_msg);
        auto& from = static_cast<const InstallMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.InstallMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_module_type() != 0)
        {
            _this->_internal_set_module_type(from._internal_module_type());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void InstallMsg::CopyFrom(const InstallMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.InstallMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool InstallMsg::IsInitialized() const
    {
        return true;
    }

    void InstallMsg::InternalSwap(InstallMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(InstallMsg, _impl_.module_type_) + sizeof(InstallMsg::_impl_.module_type_) - PROTOBUF_FIELD_OFFSET(InstallMsg, _impl_.player_id_)>(
            reinterpret_cast<char*>(&_impl_.player_id_),
            reinterpret_cast<char*>(&other->_impl_.player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata InstallMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[8]
        );
    }

    // ===================================================================

    class BuildShipMsg::_Internal
    {
    public:
    };

    BuildShipMsg::BuildShipMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.BuildShipMsg)
    }
    BuildShipMsg::BuildShipMsg(const BuildShipMsg& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        BuildShipMsg* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.team_id_){}, decltype(_impl_.ship_type_){}, decltype(_impl_.birthpoint_index_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.team_id_, &from._impl_.team_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.birthpoint_index_) - reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.birthpoint_index_));
        // @@protoc_insertion_point(copy_constructor:protobuf.BuildShipMsg)
    }

    inline void BuildShipMsg::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.ship_type_){0}, decltype(_impl_.birthpoint_index_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    BuildShipMsg::~BuildShipMsg()
    {
        // @@protoc_insertion_point(destructor:protobuf.BuildShipMsg)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void BuildShipMsg::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void BuildShipMsg::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void BuildShipMsg::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.BuildShipMsg)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.team_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.birthpoint_index_) - reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.birthpoint_index_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* BuildShipMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.ShipType ship_type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_ship_type(static_cast<::protobuf::ShipType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 birthpoint_index = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.birthpoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* BuildShipMsg::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.BuildShipMsg)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.ShipType ship_type = 1;
        if (this->_internal_ship_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_ship_type(), target
            );
        }

        // int64 team_id = 2;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_team_id(), target);
        }

        // int32 birthpoint_index = 3;
        if (this->_internal_birthpoint_index() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_birthpoint_index(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.BuildShipMsg)
        return target;
    }

    size_t BuildShipMsg::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.BuildShipMsg)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 team_id = 2;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // .protobuf.ShipType ship_type = 1;
        if (this->_internal_ship_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_ship_type());
        }

        // int32 birthpoint_index = 3;
        if (this->_internal_birthpoint_index() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_birthpoint_index());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildShipMsg::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        BuildShipMsg::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* BuildShipMsg::GetClassData() const
    {
        return &_class_data_;
    }

    void BuildShipMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<BuildShipMsg*>(&to_msg);
        auto& from = static_cast<const BuildShipMsg&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.BuildShipMsg)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_ship_type() != 0)
        {
            _this->_internal_set_ship_type(from._internal_ship_type());
        }
        if (from._internal_birthpoint_index() != 0)
        {
            _this->_internal_set_birthpoint_index(from._internal_birthpoint_index());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void BuildShipMsg::CopyFrom(const BuildShipMsg& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.BuildShipMsg)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool BuildShipMsg::IsInitialized() const
    {
        return true;
    }

    void BuildShipMsg::InternalSwap(BuildShipMsg* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(BuildShipMsg, _impl_.birthpoint_index_) + sizeof(BuildShipMsg::_impl_.birthpoint_index_) - PROTOBUF_FIELD_OFFSET(BuildShipMsg, _impl_.team_id_)>(
            reinterpret_cast<char*>(&_impl_.team_id_),
            reinterpret_cast<char*>(&other->_impl_.team_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata BuildShipMsg::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Server_2eproto_getter, &descriptor_table_Message2Server_2eproto_once, file_level_metadata_Message2Server_2eproto[9]
        );
    }

    // @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::protobuf::NullRequest*
    Arena::CreateMaybeMessage<::protobuf::NullRequest>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::NullRequest>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::IDMsg*
    Arena::CreateMaybeMessage<::protobuf::IDMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::IDMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::PlayerMsg*
    Arena::CreateMaybeMessage<::protobuf::PlayerMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::PlayerMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MoveMsg*
    Arena::CreateMaybeMessage<::protobuf::MoveMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MoveMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::SendMsg*
    Arena::CreateMaybeMessage<::protobuf::SendMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::SendMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::AttackMsg*
    Arena::CreateMaybeMessage<::protobuf::AttackMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::AttackMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::ConstructMsg*
    Arena::CreateMaybeMessage<::protobuf::ConstructMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::ConstructMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::RecoverMsg*
    Arena::CreateMaybeMessage<::protobuf::RecoverMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::RecoverMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::InstallMsg*
    Arena::CreateMaybeMessage<::protobuf::InstallMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::InstallMsg>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::BuildShipMsg*
    Arena::CreateMaybeMessage<::protobuf::BuildShipMsg>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::BuildShipMsg>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
