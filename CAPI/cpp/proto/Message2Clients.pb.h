// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message2Clients_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message2Clients_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message2Clients_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message2Clients_2eproto
{
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Clients_2eproto;
namespace protobuf
{
    class BoolRes;
    struct BoolResDefaultTypeInternal;
    extern BoolResDefaultTypeInternal _BoolRes_default_instance_;
    class BuildShipRes;
    struct BuildShipResDefaultTypeInternal;
    extern BuildShipResDefaultTypeInternal _BuildShipRes_default_instance_;
    class EcoRes;
    struct EcoResDefaultTypeInternal;
    extern EcoResDefaultTypeInternal _EcoRes_default_instance_;
    class MessageOfAll;
    struct MessageOfAllDefaultTypeInternal;
    extern MessageOfAllDefaultTypeInternal _MessageOfAll_default_instance_;
    class MessageOfBombedBullet;
    struct MessageOfBombedBulletDefaultTypeInternal;
    extern MessageOfBombedBulletDefaultTypeInternal _MessageOfBombedBullet_default_instance_;
    class MessageOfBullet;
    struct MessageOfBulletDefaultTypeInternal;
    extern MessageOfBulletDefaultTypeInternal _MessageOfBullet_default_instance_;
    class MessageOfCommunity;
    struct MessageOfCommunityDefaultTypeInternal;
    extern MessageOfCommunityDefaultTypeInternal _MessageOfCommunity_default_instance_;
    class MessageOfFactory;
    struct MessageOfFactoryDefaultTypeInternal;
    extern MessageOfFactoryDefaultTypeInternal _MessageOfFactory_default_instance_;
    class MessageOfFort;
    struct MessageOfFortDefaultTypeInternal;
    extern MessageOfFortDefaultTypeInternal _MessageOfFort_default_instance_;
    class MessageOfHome;
    struct MessageOfHomeDefaultTypeInternal;
    extern MessageOfHomeDefaultTypeInternal _MessageOfHome_default_instance_;
    class MessageOfMap;
    struct MessageOfMapDefaultTypeInternal;
    extern MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
    class MessageOfMap_Row;
    struct MessageOfMap_RowDefaultTypeInternal;
    extern MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
    class MessageOfNews;
    struct MessageOfNewsDefaultTypeInternal;
    extern MessageOfNewsDefaultTypeInternal _MessageOfNews_default_instance_;
    class MessageOfObj;
    struct MessageOfObjDefaultTypeInternal;
    extern MessageOfObjDefaultTypeInternal _MessageOfObj_default_instance_;
    class MessageOfResource;
    struct MessageOfResourceDefaultTypeInternal;
    extern MessageOfResourceDefaultTypeInternal _MessageOfResource_default_instance_;
    class MessageOfShip;
    struct MessageOfShipDefaultTypeInternal;
    extern MessageOfShipDefaultTypeInternal _MessageOfShip_default_instance_;
    class MessageOfTeam;
    struct MessageOfTeamDefaultTypeInternal;
    extern MessageOfTeamDefaultTypeInternal _MessageOfTeam_default_instance_;
    class MessageOfWormhole;
    struct MessageOfWormholeDefaultTypeInternal;
    extern MessageOfWormholeDefaultTypeInternal _MessageOfWormhole_default_instance_;
    class MessageToClient;
    struct MessageToClientDefaultTypeInternal;
    extern MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
    class MoveRes;
    struct MoveResDefaultTypeInternal;
    extern MoveResDefaultTypeInternal _MoveRes_default_instance_;
    class ShipInfoRes;
    struct ShipInfoResDefaultTypeInternal;
    extern ShipInfoResDefaultTypeInternal _ShipInfoRes_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
::protobuf::BoolRes* Arena::CreateMaybeMessage<::protobuf::BoolRes>(Arena*);
template<>
::protobuf::BuildShipRes* Arena::CreateMaybeMessage<::protobuf::BuildShipRes>(Arena*);
template<>
::protobuf::EcoRes* Arena::CreateMaybeMessage<::protobuf::EcoRes>(Arena*);
template<>
::protobuf::MessageOfAll* Arena::CreateMaybeMessage<::protobuf::MessageOfAll>(Arena*);
template<>
::protobuf::MessageOfBombedBullet* Arena::CreateMaybeMessage<::protobuf::MessageOfBombedBullet>(Arena*);
template<>
::protobuf::MessageOfBullet* Arena::CreateMaybeMessage<::protobuf::MessageOfBullet>(Arena*);
template<>
::protobuf::MessageOfCommunity* Arena::CreateMaybeMessage<::protobuf::MessageOfCommunity>(Arena*);
template<>
::protobuf::MessageOfFactory* Arena::CreateMaybeMessage<::protobuf::MessageOfFactory>(Arena*);
template<>
::protobuf::MessageOfFort* Arena::CreateMaybeMessage<::protobuf::MessageOfFort>(Arena*);
template<>
::protobuf::MessageOfHome* Arena::CreateMaybeMessage<::protobuf::MessageOfHome>(Arena*);
template<>
::protobuf::MessageOfMap* Arena::CreateMaybeMessage<::protobuf::MessageOfMap>(Arena*);
template<>
::protobuf::MessageOfMap_Row* Arena::CreateMaybeMessage<::protobuf::MessageOfMap_Row>(Arena*);
template<>
::protobuf::MessageOfNews* Arena::CreateMaybeMessage<::protobuf::MessageOfNews>(Arena*);
template<>
::protobuf::MessageOfObj* Arena::CreateMaybeMessage<::protobuf::MessageOfObj>(Arena*);
template<>
::protobuf::MessageOfResource* Arena::CreateMaybeMessage<::protobuf::MessageOfResource>(Arena*);
template<>
::protobuf::MessageOfShip* Arena::CreateMaybeMessage<::protobuf::MessageOfShip>(Arena*);
template<>
::protobuf::MessageOfTeam* Arena::CreateMaybeMessage<::protobuf::MessageOfTeam>(Arena*);
template<>
::protobuf::MessageOfWormhole* Arena::CreateMaybeMessage<::protobuf::MessageOfWormhole>(Arena*);
template<>
::protobuf::MessageToClient* Arena::CreateMaybeMessage<::protobuf::MessageToClient>(Arena*);
template<>
::protobuf::MoveRes* Arena::CreateMaybeMessage<::protobuf::MoveRes>(Arena*);
template<>
::protobuf::ShipInfoRes* Arena::CreateMaybeMessage<::protobuf::ShipInfoRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf
{

    // ===================================================================

    class MessageOfShip final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfShip) */
    {
    public:
        inline MessageOfShip() :
            MessageOfShip(nullptr)
        {
        }
        ~MessageOfShip() override;
        explicit PROTOBUF_CONSTEXPR MessageOfShip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfShip(const MessageOfShip& from);
        MessageOfShip(MessageOfShip&& from) noexcept
            :
            MessageOfShip()
        {
            *this = ::std::move(from);
        }

        inline MessageOfShip& operator=(const MessageOfShip& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfShip& operator=(MessageOfShip&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfShip& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfShip* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfShip*>(
                &_MessageOfShip_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(MessageOfShip& a, MessageOfShip& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfShip* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfShip* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfShip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfShip>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfShip& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfShip& from)
        {
            MessageOfShip::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfShip* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfShip";
        }

    protected:
        explicit MessageOfShip(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kSpeedFieldNumber = 3,
            kHpFieldNumber = 4,
            kArmorFieldNumber = 5,
            kShieldFieldNumber = 6,
            kTeamIdFieldNumber = 7,
            kPlayerIdFieldNumber = 8,
            kGuidFieldNumber = 9,
            kShipStateFieldNumber = 10,
            kShipTypeFieldNumber = 11,
            kViewRangeFieldNumber = 12,
            kProducerTypeFieldNumber = 13,
            kConstructorTypeFieldNumber = 14,
            kArmorTypeFieldNumber = 15,
            kShieldTypeFieldNumber = 16,
            kWeaponTypeFieldNumber = 17,
            kFacingDirectionFieldNumber = 18,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int32 speed = 3;
        void clear_speed();
        int32_t speed() const;
        void set_speed(int32_t value);

    private:
        int32_t _internal_speed() const;
        void _internal_set_speed(int32_t value);

    public:
        // int32 hp = 4;
        void clear_hp();
        int32_t hp() const;
        void set_hp(int32_t value);

    private:
        int32_t _internal_hp() const;
        void _internal_set_hp(int32_t value);

    public:
        // int32 armor = 5;
        void clear_armor();
        int32_t armor() const;
        void set_armor(int32_t value);

    private:
        int32_t _internal_armor() const;
        void _internal_set_armor(int32_t value);

    public:
        // int32 shield = 6;
        void clear_shield();
        int32_t shield() const;
        void set_shield(int32_t value);

    private:
        int32_t _internal_shield() const;
        void _internal_set_shield(int32_t value);

    public:
        // int64 team_id = 7;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int64 player_id = 8;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 guid = 9;
        void clear_guid();
        int64_t guid() const;
        void set_guid(int64_t value);

    private:
        int64_t _internal_guid() const;
        void _internal_set_guid(int64_t value);

    public:
        // .protobuf.ShipState ship_state = 10;
        void clear_ship_state();
        ::protobuf::ShipState ship_state() const;
        void set_ship_state(::protobuf::ShipState value);

    private:
        ::protobuf::ShipState _internal_ship_state() const;
        void _internal_set_ship_state(::protobuf::ShipState value);

    public:
        // .protobuf.ShipType ship_type = 11;
        void clear_ship_type();
        ::protobuf::ShipType ship_type() const;
        void set_ship_type(::protobuf::ShipType value);

    private:
        ::protobuf::ShipType _internal_ship_type() const;
        void _internal_set_ship_type(::protobuf::ShipType value);

    public:
        // int32 view_range = 12;
        void clear_view_range();
        int32_t view_range() const;
        void set_view_range(int32_t value);

    private:
        int32_t _internal_view_range() const;
        void _internal_set_view_range(int32_t value);

    public:
        // .protobuf.ProducerType producer_type = 13;
        void clear_producer_type();
        ::protobuf::ProducerType producer_type() const;
        void set_producer_type(::protobuf::ProducerType value);

    private:
        ::protobuf::ProducerType _internal_producer_type() const;
        void _internal_set_producer_type(::protobuf::ProducerType value);

    public:
        // .protobuf.ConstructorType constructor_type = 14;
        void clear_constructor_type();
        ::protobuf::ConstructorType constructor_type() const;
        void set_constructor_type(::protobuf::ConstructorType value);

    private:
        ::protobuf::ConstructorType _internal_constructor_type() const;
        void _internal_set_constructor_type(::protobuf::ConstructorType value);

    public:
        // .protobuf.ArmorType armor_type = 15;
        void clear_armor_type();
        ::protobuf::ArmorType armor_type() const;
        void set_armor_type(::protobuf::ArmorType value);

    private:
        ::protobuf::ArmorType _internal_armor_type() const;
        void _internal_set_armor_type(::protobuf::ArmorType value);

    public:
        // .protobuf.ShieldType shield_type = 16;
        void clear_shield_type();
        ::protobuf::ShieldType shield_type() const;
        void set_shield_type(::protobuf::ShieldType value);

    private:
        ::protobuf::ShieldType _internal_shield_type() const;
        void _internal_set_shield_type(::protobuf::ShieldType value);

    public:
        // .protobuf.WeaponType weapon_type = 17;
        void clear_weapon_type();
        ::protobuf::WeaponType weapon_type() const;
        void set_weapon_type(::protobuf::WeaponType value);

    private:
        ::protobuf::WeaponType _internal_weapon_type() const;
        void _internal_set_weapon_type(::protobuf::WeaponType value);

    public:
        // double facing_direction = 18;
        void clear_facing_direction();
        double facing_direction() const;
        void set_facing_direction(double value);

    private:
        double _internal_facing_direction() const;
        void _internal_set_facing_direction(double value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfShip)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int32_t speed_;
            int32_t hp_;
            int32_t armor_;
            int32_t shield_;
            int64_t team_id_;
            int64_t player_id_;
            int64_t guid_;
            int ship_state_;
            int ship_type_;
            int32_t view_range_;
            int producer_type_;
            int constructor_type_;
            int armor_type_;
            int shield_type_;
            int weapon_type_;
            double facing_direction_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfBullet final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfBullet) */
    {
    public:
        inline MessageOfBullet() :
            MessageOfBullet(nullptr)
        {
        }
        ~MessageOfBullet() override;
        explicit PROTOBUF_CONSTEXPR MessageOfBullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfBullet(const MessageOfBullet& from);
        MessageOfBullet(MessageOfBullet&& from) noexcept
            :
            MessageOfBullet()
        {
            *this = ::std::move(from);
        }

        inline MessageOfBullet& operator=(const MessageOfBullet& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfBullet& operator=(MessageOfBullet&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfBullet& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfBullet* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfBullet*>(
                &_MessageOfBullet_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(MessageOfBullet& a, MessageOfBullet& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfBullet* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfBullet* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfBullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfBullet>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfBullet& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfBullet& from)
        {
            MessageOfBullet::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfBullet* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfBullet";
        }

    protected:
        explicit MessageOfBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kTypeFieldNumber = 1,
            kXFieldNumber = 2,
            kFacingDirectionFieldNumber = 4,
            kYFieldNumber = 3,
            kDamageFieldNumber = 5,
            kTeamIdFieldNumber = 6,
            kGuidFieldNumber = 7,
            kBombRangeFieldNumber = 8,
            kSpeedFieldNumber = 9,
        };
        // .protobuf.BulletType type = 1;
        void clear_type();
        ::protobuf::BulletType type() const;
        void set_type(::protobuf::BulletType value);

    private:
        ::protobuf::BulletType _internal_type() const;
        void _internal_set_type(::protobuf::BulletType value);

    public:
        // int32 x = 2;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // double facing_direction = 4;
        void clear_facing_direction();
        double facing_direction() const;
        void set_facing_direction(double value);

    private:
        double _internal_facing_direction() const;
        void _internal_set_facing_direction(double value);

    public:
        // int32 y = 3;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int32 damage = 5;
        void clear_damage();
        int32_t damage() const;
        void set_damage(int32_t value);

    private:
        int32_t _internal_damage() const;
        void _internal_set_damage(int32_t value);

    public:
        // int64 team_id = 6;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int64 guid = 7;
        void clear_guid();
        int64_t guid() const;
        void set_guid(int64_t value);

    private:
        int64_t _internal_guid() const;
        void _internal_set_guid(int64_t value);

    public:
        // double bomb_range = 8;
        void clear_bomb_range();
        double bomb_range() const;
        void set_bomb_range(double value);

    private:
        double _internal_bomb_range() const;
        void _internal_set_bomb_range(double value);

    public:
        // int32 speed = 9;
        void clear_speed();
        int32_t speed() const;
        void set_speed(int32_t value);

    private:
        int32_t _internal_speed() const;
        void _internal_set_speed(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfBullet)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int type_;
            int32_t x_;
            double facing_direction_;
            int32_t y_;
            int32_t damage_;
            int64_t team_id_;
            int64_t guid_;
            double bomb_range_;
            int32_t speed_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfBombedBullet final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfBombedBullet) */
    {
    public:
        inline MessageOfBombedBullet() :
            MessageOfBombedBullet(nullptr)
        {
        }
        ~MessageOfBombedBullet() override;
        explicit PROTOBUF_CONSTEXPR MessageOfBombedBullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfBombedBullet(const MessageOfBombedBullet& from);
        MessageOfBombedBullet(MessageOfBombedBullet&& from) noexcept
            :
            MessageOfBombedBullet()
        {
            *this = ::std::move(from);
        }

        inline MessageOfBombedBullet& operator=(const MessageOfBombedBullet& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfBombedBullet& operator=(MessageOfBombedBullet&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfBombedBullet& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfBombedBullet* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfBombedBullet*>(
                &_MessageOfBombedBullet_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(MessageOfBombedBullet& a, MessageOfBombedBullet& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfBombedBullet* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfBombedBullet* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfBombedBullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfBombedBullet>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfBombedBullet& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfBombedBullet& from)
        {
            MessageOfBombedBullet::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfBombedBullet* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfBombedBullet";
        }

    protected:
        explicit MessageOfBombedBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kTypeFieldNumber = 1,
            kXFieldNumber = 2,
            kFacingDirectionFieldNumber = 4,
            kMappingIdFieldNumber = 5,
            kBombRangeFieldNumber = 6,
            kYFieldNumber = 3,
        };
        // .protobuf.BulletType type = 1;
        void clear_type();
        ::protobuf::BulletType type() const;
        void set_type(::protobuf::BulletType value);

    private:
        ::protobuf::BulletType _internal_type() const;
        void _internal_set_type(::protobuf::BulletType value);

    public:
        // int32 x = 2;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // double facing_direction = 4;
        void clear_facing_direction();
        double facing_direction() const;
        void set_facing_direction(double value);

    private:
        double _internal_facing_direction() const;
        void _internal_set_facing_direction(double value);

    public:
        // int64 mapping_id = 5;
        void clear_mapping_id();
        int64_t mapping_id() const;
        void set_mapping_id(int64_t value);

    private:
        int64_t _internal_mapping_id() const;
        void _internal_set_mapping_id(int64_t value);

    public:
        // double bomb_range = 6;
        void clear_bomb_range();
        double bomb_range() const;
        void set_bomb_range(double value);

    private:
        double _internal_bomb_range() const;
        void _internal_set_bomb_range(double value);

    public:
        // int32 y = 3;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfBombedBullet)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int type_;
            int32_t x_;
            double facing_direction_;
            int64_t mapping_id_;
            double bomb_range_;
            int32_t y_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfFactory final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfFactory) */
    {
    public:
        inline MessageOfFactory() :
            MessageOfFactory(nullptr)
        {
        }
        ~MessageOfFactory() override;
        explicit PROTOBUF_CONSTEXPR MessageOfFactory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfFactory(const MessageOfFactory& from);
        MessageOfFactory(MessageOfFactory&& from) noexcept
            :
            MessageOfFactory()
        {
            *this = ::std::move(from);
        }

        inline MessageOfFactory& operator=(const MessageOfFactory& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfFactory& operator=(MessageOfFactory&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfFactory& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfFactory* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfFactory*>(
                &_MessageOfFactory_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            3;

        friend void swap(MessageOfFactory& a, MessageOfFactory& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfFactory* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfFactory* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfFactory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfFactory>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfFactory& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfFactory& from)
        {
            MessageOfFactory::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfFactory* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfFactory";
        }

    protected:
        explicit MessageOfFactory(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kTeamIdFieldNumber = 4,
            kHpFieldNumber = 3,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int64 team_id = 4;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int32 hp = 3;
        void clear_hp();
        int32_t hp() const;
        void set_hp(int32_t value);

    private:
        int32_t _internal_hp() const;
        void _internal_set_hp(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfFactory)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int64_t team_id_;
            int32_t hp_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfCommunity final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfCommunity) */
    {
    public:
        inline MessageOfCommunity() :
            MessageOfCommunity(nullptr)
        {
        }
        ~MessageOfCommunity() override;
        explicit PROTOBUF_CONSTEXPR MessageOfCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfCommunity(const MessageOfCommunity& from);
        MessageOfCommunity(MessageOfCommunity&& from) noexcept
            :
            MessageOfCommunity()
        {
            *this = ::std::move(from);
        }

        inline MessageOfCommunity& operator=(const MessageOfCommunity& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfCommunity& operator=(MessageOfCommunity&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfCommunity& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfCommunity* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfCommunity*>(
                &_MessageOfCommunity_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            4;

        friend void swap(MessageOfCommunity& a, MessageOfCommunity& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfCommunity* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfCommunity* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfCommunity>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfCommunity& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfCommunity& from)
        {
            MessageOfCommunity::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfCommunity* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfCommunity";
        }

    protected:
        explicit MessageOfCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kTeamIdFieldNumber = 4,
            kHpFieldNumber = 3,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int64 team_id = 4;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int32 hp = 3;
        void clear_hp();
        int32_t hp() const;
        void set_hp(int32_t value);

    private:
        int32_t _internal_hp() const;
        void _internal_set_hp(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfCommunity)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int64_t team_id_;
            int32_t hp_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfFort final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfFort) */
    {
    public:
        inline MessageOfFort() :
            MessageOfFort(nullptr)
        {
        }
        ~MessageOfFort() override;
        explicit PROTOBUF_CONSTEXPR MessageOfFort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfFort(const MessageOfFort& from);
        MessageOfFort(MessageOfFort&& from) noexcept
            :
            MessageOfFort()
        {
            *this = ::std::move(from);
        }

        inline MessageOfFort& operator=(const MessageOfFort& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfFort& operator=(MessageOfFort&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfFort& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfFort* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfFort*>(
                &_MessageOfFort_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            5;

        friend void swap(MessageOfFort& a, MessageOfFort& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfFort* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfFort* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfFort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfFort>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfFort& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfFort& from)
        {
            MessageOfFort::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfFort* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfFort";
        }

    protected:
        explicit MessageOfFort(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kTeamIdFieldNumber = 4,
            kHpFieldNumber = 3,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int64 team_id = 4;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int32 hp = 3;
        void clear_hp();
        int32_t hp() const;
        void set_hp(int32_t value);

    private:
        int32_t _internal_hp() const;
        void _internal_set_hp(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfFort)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int64_t team_id_;
            int32_t hp_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfWormhole final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfWormhole) */
    {
    public:
        inline MessageOfWormhole() :
            MessageOfWormhole(nullptr)
        {
        }
        ~MessageOfWormhole() override;
        explicit PROTOBUF_CONSTEXPR MessageOfWormhole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfWormhole(const MessageOfWormhole& from);
        MessageOfWormhole(MessageOfWormhole&& from) noexcept
            :
            MessageOfWormhole()
        {
            *this = ::std::move(from);
        }

        inline MessageOfWormhole& operator=(const MessageOfWormhole& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfWormhole& operator=(MessageOfWormhole&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfWormhole& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfWormhole* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfWormhole*>(
                &_MessageOfWormhole_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            6;

        friend void swap(MessageOfWormhole& a, MessageOfWormhole& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfWormhole* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfWormhole* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfWormhole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfWormhole>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfWormhole& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfWormhole& from)
        {
            MessageOfWormhole::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfWormhole* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfWormhole";
        }

    protected:
        explicit MessageOfWormhole(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kHpFieldNumber = 3,
            kIdFieldNumber = 4,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int32 hp = 3;
        void clear_hp();
        int32_t hp() const;
        void set_hp(int32_t value);

    private:
        int32_t _internal_hp() const;
        void _internal_set_hp(int32_t value);

    public:
        // int32 id = 4;
        void clear_id();
        int32_t id() const;
        void set_id(int32_t value);

    private:
        int32_t _internal_id() const;
        void _internal_set_id(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfWormhole)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int32_t hp_;
            int32_t id_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfResource final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfResource) */
    {
    public:
        inline MessageOfResource() :
            MessageOfResource(nullptr)
        {
        }
        ~MessageOfResource() override;
        explicit PROTOBUF_CONSTEXPR MessageOfResource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfResource(const MessageOfResource& from);
        MessageOfResource(MessageOfResource&& from) noexcept
            :
            MessageOfResource()
        {
            *this = ::std::move(from);
        }

        inline MessageOfResource& operator=(const MessageOfResource& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfResource& operator=(MessageOfResource&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfResource& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfResource* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfResource*>(
                &_MessageOfResource_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            7;

        friend void swap(MessageOfResource& a, MessageOfResource& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfResource* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfResource* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfResource>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfResource& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfResource& from)
        {
            MessageOfResource::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfResource* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfResource";
        }

    protected:
        explicit MessageOfResource(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kProgressFieldNumber = 3,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int32 progress = 3;
        void clear_progress();
        int32_t progress() const;
        void set_progress(int32_t value);

    private:
        int32_t _internal_progress() const;
        void _internal_set_progress(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfResource)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int32_t progress_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfHome final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfHome) */
    {
    public:
        inline MessageOfHome() :
            MessageOfHome(nullptr)
        {
        }
        ~MessageOfHome() override;
        explicit PROTOBUF_CONSTEXPR MessageOfHome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfHome(const MessageOfHome& from);
        MessageOfHome(MessageOfHome&& from) noexcept
            :
            MessageOfHome()
        {
            *this = ::std::move(from);
        }

        inline MessageOfHome& operator=(const MessageOfHome& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfHome& operator=(MessageOfHome&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfHome& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfHome* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfHome*>(
                &_MessageOfHome_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            8;

        friend void swap(MessageOfHome& a, MessageOfHome& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfHome* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfHome* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfHome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfHome>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfHome& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfHome& from)
        {
            MessageOfHome::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfHome* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfHome";
        }

    protected:
        explicit MessageOfHome(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kTeamIdFieldNumber = 4,
            kHpFieldNumber = 3,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int64 team_id = 4;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int32 hp = 3;
        void clear_hp();
        int32_t hp() const;
        void set_hp(int32_t value);

    private:
        int32_t _internal_hp() const;
        void _internal_set_hp(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfHome)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t x_;
            int32_t y_;
            int64_t team_id_;
            int32_t hp_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfMap_Row final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfMap.Row) */
    {
    public:
        inline MessageOfMap_Row() :
            MessageOfMap_Row(nullptr)
        {
        }
        ~MessageOfMap_Row() override;
        explicit PROTOBUF_CONSTEXPR MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfMap_Row(const MessageOfMap_Row& from);
        MessageOfMap_Row(MessageOfMap_Row&& from) noexcept
            :
            MessageOfMap_Row()
        {
            *this = ::std::move(from);
        }

        inline MessageOfMap_Row& operator=(const MessageOfMap_Row& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfMap_Row& operator=(MessageOfMap_Row&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfMap_Row& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfMap_Row* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfMap_Row*>(
                &_MessageOfMap_Row_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            9;

        friend void swap(MessageOfMap_Row& a, MessageOfMap_Row& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfMap_Row* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfMap_Row* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfMap_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfMap_Row>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfMap_Row& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfMap_Row& from)
        {
            MessageOfMap_Row::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfMap_Row* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfMap.Row";
        }

    protected:
        explicit MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kColsFieldNumber = 1,
        };
        // repeated .protobuf.PlaceType cols = 1;
        int cols_size() const;

    private:
        int _internal_cols_size() const;

    public:
        void clear_cols();

    private:
        ::protobuf::PlaceType _internal_cols(int index) const;
        void _internal_add_cols(::protobuf::PlaceType value);
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_cols();

    public:
        ::protobuf::PlaceType cols(int index) const;
        void set_cols(int index, ::protobuf::PlaceType value);
        void add_cols(::protobuf::PlaceType value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cols() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cols();

        // @@protoc_insertion_point(class_scope:protobuf.MessageOfMap.Row)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cols_;
            mutable std::atomic<int> _cols_cached_byte_size_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfMap final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfMap) */
    {
    public:
        inline MessageOfMap() :
            MessageOfMap(nullptr)
        {
        }
        ~MessageOfMap() override;
        explicit PROTOBUF_CONSTEXPR MessageOfMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfMap(const MessageOfMap& from);
        MessageOfMap(MessageOfMap&& from) noexcept
            :
            MessageOfMap()
        {
            *this = ::std::move(from);
        }

        inline MessageOfMap& operator=(const MessageOfMap& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfMap& operator=(MessageOfMap&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfMap& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfMap* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfMap*>(
                &_MessageOfMap_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            10;

        friend void swap(MessageOfMap& a, MessageOfMap& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfMap* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfMap* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfMap>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfMap& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfMap& from)
        {
            MessageOfMap::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfMap* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfMap";
        }

    protected:
        explicit MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        typedef MessageOfMap_Row Row;

        // accessors -------------------------------------------------------

        enum : int
        {
            kRowsFieldNumber = 3,
            kHeightFieldNumber = 1,
            kWidthFieldNumber = 2,
        };
        // repeated .protobuf.MessageOfMap.Row rows = 3;
        int rows_size() const;

    private:
        int _internal_rows_size() const;

    public:
        void clear_rows();
        ::protobuf::MessageOfMap_Row* mutable_rows(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>*
            mutable_rows();

    private:
        const ::protobuf::MessageOfMap_Row& _internal_rows(int index) const;
        ::protobuf::MessageOfMap_Row* _internal_add_rows();

    public:
        const ::protobuf::MessageOfMap_Row& rows(int index) const;
        ::protobuf::MessageOfMap_Row* add_rows();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>&
            rows() const;

        // uint32 height = 1;
        void clear_height();
        uint32_t height() const;
        void set_height(uint32_t value);

    private:
        uint32_t _internal_height() const;
        void _internal_set_height(uint32_t value);

    public:
        // uint32 width = 2;
        void clear_width();
        uint32_t width() const;
        void set_width(uint32_t value);

    private:
        uint32_t _internal_width() const;
        void _internal_set_width(uint32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfMap)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row> rows_;
            uint32_t height_;
            uint32_t width_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfTeam final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfTeam) */
    {
    public:
        inline MessageOfTeam() :
            MessageOfTeam(nullptr)
        {
        }
        ~MessageOfTeam() override;
        explicit PROTOBUF_CONSTEXPR MessageOfTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfTeam(const MessageOfTeam& from);
        MessageOfTeam(MessageOfTeam&& from) noexcept
            :
            MessageOfTeam()
        {
            *this = ::std::move(from);
        }

        inline MessageOfTeam& operator=(const MessageOfTeam& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfTeam& operator=(MessageOfTeam&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfTeam& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfTeam* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfTeam*>(
                &_MessageOfTeam_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            11;

        friend void swap(MessageOfTeam& a, MessageOfTeam& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfTeam* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfTeam* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfTeam>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfTeam& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfTeam& from)
        {
            MessageOfTeam::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfTeam* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfTeam";
        }

    protected:
        explicit MessageOfTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kTeamIdFieldNumber = 1,
            kPlayerIdFieldNumber = 2,
            kScoreFieldNumber = 3,
            kEnergyFieldNumber = 4,
        };
        // int64 team_id = 1;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // int64 player_id = 2;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 score = 3;
        void clear_score();
        int64_t score() const;
        void set_score(int64_t value);

    private:
        int64_t _internal_score() const;
        void _internal_set_score(int64_t value);

    public:
        // int64 energy = 4;
        void clear_energy();
        int64_t energy() const;
        void set_energy(int64_t value);

    private:
        int64_t _internal_energy() const;
        void _internal_set_energy(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfTeam)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int64_t team_id_;
            int64_t player_id_;
            int64_t score_;
            int64_t energy_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfObj final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfObj) */
    {
    public:
        inline MessageOfObj() :
            MessageOfObj(nullptr)
        {
        }
        ~MessageOfObj() override;
        explicit PROTOBUF_CONSTEXPR MessageOfObj(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfObj(const MessageOfObj& from);
        MessageOfObj(MessageOfObj&& from) noexcept
            :
            MessageOfObj()
        {
            *this = ::std::move(from);
        }

        inline MessageOfObj& operator=(const MessageOfObj& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfObj& operator=(MessageOfObj&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfObj& default_instance()
        {
            return *internal_default_instance();
        }
        enum MessageOfObjCase
        {
            kShipMessage = 1,
            kBulletMessage = 2,
            kFactoryMessage = 3,
            kCommunityMessage = 4,
            kFortMessage = 5,
            kWormholeMessage = 6,
            kHomeMessage = 7,
            kResourceMessage = 8,
            kMapMessage = 9,
            kNewsMessage = 10,
            kBombedBulletMessage = 11,
            kTeamMessage = 12,
            MESSAGE_OF_OBJ_NOT_SET = 0,
        };

        static inline const MessageOfObj* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfObj*>(
                &_MessageOfObj_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            12;

        friend void swap(MessageOfObj& a, MessageOfObj& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfObj* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfObj* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfObj>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfObj& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfObj& from)
        {
            MessageOfObj::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfObj* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfObj";
        }

    protected:
        explicit MessageOfObj(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipMessageFieldNumber = 1,
            kBulletMessageFieldNumber = 2,
            kFactoryMessageFieldNumber = 3,
            kCommunityMessageFieldNumber = 4,
            kFortMessageFieldNumber = 5,
            kWormholeMessageFieldNumber = 6,
            kHomeMessageFieldNumber = 7,
            kResourceMessageFieldNumber = 8,
            kMapMessageFieldNumber = 9,
            kNewsMessageFieldNumber = 10,
            kBombedBulletMessageFieldNumber = 11,
            kTeamMessageFieldNumber = 12,
        };
        // .protobuf.MessageOfShip ship_message = 1;
        bool has_ship_message() const;

    private:
        bool _internal_has_ship_message() const;

    public:
        void clear_ship_message();
        const ::protobuf::MessageOfShip& ship_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfShip* release_ship_message();
        ::protobuf::MessageOfShip* mutable_ship_message();
        void set_allocated_ship_message(::protobuf::MessageOfShip* ship_message);

    private:
        const ::protobuf::MessageOfShip& _internal_ship_message() const;
        ::protobuf::MessageOfShip* _internal_mutable_ship_message();

    public:
        void unsafe_arena_set_allocated_ship_message(
            ::protobuf::MessageOfShip* ship_message
        );
        ::protobuf::MessageOfShip* unsafe_arena_release_ship_message();

        // .protobuf.MessageOfBullet bullet_message = 2;
        bool has_bullet_message() const;

    private:
        bool _internal_has_bullet_message() const;

    public:
        void clear_bullet_message();
        const ::protobuf::MessageOfBullet& bullet_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfBullet* release_bullet_message();
        ::protobuf::MessageOfBullet* mutable_bullet_message();
        void set_allocated_bullet_message(::protobuf::MessageOfBullet* bullet_message);

    private:
        const ::protobuf::MessageOfBullet& _internal_bullet_message() const;
        ::protobuf::MessageOfBullet* _internal_mutable_bullet_message();

    public:
        void unsafe_arena_set_allocated_bullet_message(
            ::protobuf::MessageOfBullet* bullet_message
        );
        ::protobuf::MessageOfBullet* unsafe_arena_release_bullet_message();

        // .protobuf.MessageOfFactory factory_message = 3;
        bool has_factory_message() const;

    private:
        bool _internal_has_factory_message() const;

    public:
        void clear_factory_message();
        const ::protobuf::MessageOfFactory& factory_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfFactory* release_factory_message();
        ::protobuf::MessageOfFactory* mutable_factory_message();
        void set_allocated_factory_message(::protobuf::MessageOfFactory* factory_message);

    private:
        const ::protobuf::MessageOfFactory& _internal_factory_message() const;
        ::protobuf::MessageOfFactory* _internal_mutable_factory_message();

    public:
        void unsafe_arena_set_allocated_factory_message(
            ::protobuf::MessageOfFactory* factory_message
        );
        ::protobuf::MessageOfFactory* unsafe_arena_release_factory_message();

        // .protobuf.MessageOfCommunity community_message = 4;
        bool has_community_message() const;

    private:
        bool _internal_has_community_message() const;

    public:
        void clear_community_message();
        const ::protobuf::MessageOfCommunity& community_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfCommunity* release_community_message();
        ::protobuf::MessageOfCommunity* mutable_community_message();
        void set_allocated_community_message(::protobuf::MessageOfCommunity* community_message);

    private:
        const ::protobuf::MessageOfCommunity& _internal_community_message() const;
        ::protobuf::MessageOfCommunity* _internal_mutable_community_message();

    public:
        void unsafe_arena_set_allocated_community_message(
            ::protobuf::MessageOfCommunity* community_message
        );
        ::protobuf::MessageOfCommunity* unsafe_arena_release_community_message();

        // .protobuf.MessageOfFort fort_message = 5;
        bool has_fort_message() const;

    private:
        bool _internal_has_fort_message() const;

    public:
        void clear_fort_message();
        const ::protobuf::MessageOfFort& fort_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfFort* release_fort_message();
        ::protobuf::MessageOfFort* mutable_fort_message();
        void set_allocated_fort_message(::protobuf::MessageOfFort* fort_message);

    private:
        const ::protobuf::MessageOfFort& _internal_fort_message() const;
        ::protobuf::MessageOfFort* _internal_mutable_fort_message();

    public:
        void unsafe_arena_set_allocated_fort_message(
            ::protobuf::MessageOfFort* fort_message
        );
        ::protobuf::MessageOfFort* unsafe_arena_release_fort_message();

        // .protobuf.MessageOfWormhole wormhole_message = 6;
        bool has_wormhole_message() const;

    private:
        bool _internal_has_wormhole_message() const;

    public:
        void clear_wormhole_message();
        const ::protobuf::MessageOfWormhole& wormhole_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfWormhole* release_wormhole_message();
        ::protobuf::MessageOfWormhole* mutable_wormhole_message();
        void set_allocated_wormhole_message(::protobuf::MessageOfWormhole* wormhole_message);

    private:
        const ::protobuf::MessageOfWormhole& _internal_wormhole_message() const;
        ::protobuf::MessageOfWormhole* _internal_mutable_wormhole_message();

    public:
        void unsafe_arena_set_allocated_wormhole_message(
            ::protobuf::MessageOfWormhole* wormhole_message
        );
        ::protobuf::MessageOfWormhole* unsafe_arena_release_wormhole_message();

        // .protobuf.MessageOfHome home_message = 7;
        bool has_home_message() const;

    private:
        bool _internal_has_home_message() const;

    public:
        void clear_home_message();
        const ::protobuf::MessageOfHome& home_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfHome* release_home_message();
        ::protobuf::MessageOfHome* mutable_home_message();
        void set_allocated_home_message(::protobuf::MessageOfHome* home_message);

    private:
        const ::protobuf::MessageOfHome& _internal_home_message() const;
        ::protobuf::MessageOfHome* _internal_mutable_home_message();

    public:
        void unsafe_arena_set_allocated_home_message(
            ::protobuf::MessageOfHome* home_message
        );
        ::protobuf::MessageOfHome* unsafe_arena_release_home_message();

        // .protobuf.MessageOfResource resource_message = 8;
        bool has_resource_message() const;

    private:
        bool _internal_has_resource_message() const;

    public:
        void clear_resource_message();
        const ::protobuf::MessageOfResource& resource_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfResource* release_resource_message();
        ::protobuf::MessageOfResource* mutable_resource_message();
        void set_allocated_resource_message(::protobuf::MessageOfResource* resource_message);

    private:
        const ::protobuf::MessageOfResource& _internal_resource_message() const;
        ::protobuf::MessageOfResource* _internal_mutable_resource_message();

    public:
        void unsafe_arena_set_allocated_resource_message(
            ::protobuf::MessageOfResource* resource_message
        );
        ::protobuf::MessageOfResource* unsafe_arena_release_resource_message();

        // .protobuf.MessageOfMap map_message = 9;
        bool has_map_message() const;

    private:
        bool _internal_has_map_message() const;

    public:
        void clear_map_message();
        const ::protobuf::MessageOfMap& map_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfMap* release_map_message();
        ::protobuf::MessageOfMap* mutable_map_message();
        void set_allocated_map_message(::protobuf::MessageOfMap* map_message);

    private:
        const ::protobuf::MessageOfMap& _internal_map_message() const;
        ::protobuf::MessageOfMap* _internal_mutable_map_message();

    public:
        void unsafe_arena_set_allocated_map_message(
            ::protobuf::MessageOfMap* map_message
        );
        ::protobuf::MessageOfMap* unsafe_arena_release_map_message();

        // .protobuf.MessageOfNews news_message = 10;
        bool has_news_message() const;

    private:
        bool _internal_has_news_message() const;

    public:
        void clear_news_message();
        const ::protobuf::MessageOfNews& news_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfNews* release_news_message();
        ::protobuf::MessageOfNews* mutable_news_message();
        void set_allocated_news_message(::protobuf::MessageOfNews* news_message);

    private:
        const ::protobuf::MessageOfNews& _internal_news_message() const;
        ::protobuf::MessageOfNews* _internal_mutable_news_message();

    public:
        void unsafe_arena_set_allocated_news_message(
            ::protobuf::MessageOfNews* news_message
        );
        ::protobuf::MessageOfNews* unsafe_arena_release_news_message();

        // .protobuf.MessageOfBombedBullet bombed_bullet_message = 11;
        bool has_bombed_bullet_message() const;

    private:
        bool _internal_has_bombed_bullet_message() const;

    public:
        void clear_bombed_bullet_message();
        const ::protobuf::MessageOfBombedBullet& bombed_bullet_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfBombedBullet* release_bombed_bullet_message();
        ::protobuf::MessageOfBombedBullet* mutable_bombed_bullet_message();
        void set_allocated_bombed_bullet_message(::protobuf::MessageOfBombedBullet* bombed_bullet_message);

    private:
        const ::protobuf::MessageOfBombedBullet& _internal_bombed_bullet_message() const;
        ::protobuf::MessageOfBombedBullet* _internal_mutable_bombed_bullet_message();

    public:
        void unsafe_arena_set_allocated_bombed_bullet_message(
            ::protobuf::MessageOfBombedBullet* bombed_bullet_message
        );
        ::protobuf::MessageOfBombedBullet* unsafe_arena_release_bombed_bullet_message();

        // .protobuf.MessageOfTeam team_message = 12;
        bool has_team_message() const;

    private:
        bool _internal_has_team_message() const;

    public:
        void clear_team_message();
        const ::protobuf::MessageOfTeam& team_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfTeam* release_team_message();
        ::protobuf::MessageOfTeam* mutable_team_message();
        void set_allocated_team_message(::protobuf::MessageOfTeam* team_message);

    private:
        const ::protobuf::MessageOfTeam& _internal_team_message() const;
        ::protobuf::MessageOfTeam* _internal_mutable_team_message();

    public:
        void unsafe_arena_set_allocated_team_message(
            ::protobuf::MessageOfTeam* team_message
        );
        ::protobuf::MessageOfTeam* unsafe_arena_release_team_message();

        void clear_message_of_obj();
        MessageOfObjCase message_of_obj_case() const;
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfObj)

    private:
        class _Internal;
        void set_has_ship_message();
        void set_has_bullet_message();
        void set_has_factory_message();
        void set_has_community_message();
        void set_has_fort_message();
        void set_has_wormhole_message();
        void set_has_home_message();
        void set_has_resource_message();
        void set_has_map_message();
        void set_has_news_message();
        void set_has_bombed_bullet_message();
        void set_has_team_message();

        inline bool has_message_of_obj() const;
        inline void clear_has_message_of_obj();

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            union MessageOfObjUnion
            {
                constexpr MessageOfObjUnion() :
                    _constinit_{}
                {
                }
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
                ::protobuf::MessageOfShip* ship_message_;
                ::protobuf::MessageOfBullet* bullet_message_;
                ::protobuf::MessageOfFactory* factory_message_;
                ::protobuf::MessageOfCommunity* community_message_;
                ::protobuf::MessageOfFort* fort_message_;
                ::protobuf::MessageOfWormhole* wormhole_message_;
                ::protobuf::MessageOfHome* home_message_;
                ::protobuf::MessageOfResource* resource_message_;
                ::protobuf::MessageOfMap* map_message_;
                ::protobuf::MessageOfNews* news_message_;
                ::protobuf::MessageOfBombedBullet* bombed_bullet_message_;
                ::protobuf::MessageOfTeam* team_message_;
            } message_of_obj_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
            uint32_t _oneof_case_[1];
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfAll final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfAll) */
    {
    public:
        inline MessageOfAll() :
            MessageOfAll(nullptr)
        {
        }
        ~MessageOfAll() override;
        explicit PROTOBUF_CONSTEXPR MessageOfAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfAll(const MessageOfAll& from);
        MessageOfAll(MessageOfAll&& from) noexcept
            :
            MessageOfAll()
        {
            *this = ::std::move(from);
        }

        inline MessageOfAll& operator=(const MessageOfAll& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfAll& operator=(MessageOfAll&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfAll& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfAll* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfAll*>(
                &_MessageOfAll_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            13;

        friend void swap(MessageOfAll& a, MessageOfAll& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfAll* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfAll* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfAll>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfAll& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfAll& from)
        {
            MessageOfAll::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfAll* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfAll";
        }

    protected:
        explicit MessageOfAll(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kGameTimeFieldNumber = 1,
            kRedTeamScoreFieldNumber = 2,
            kBlueTeamScoreFieldNumber = 3,
            kRedTeamEnergyFieldNumber = 4,
            kBlueTeamEnergyFieldNumber = 5,
            kRedHomeHpFieldNumber = 6,
            kBlueHomeHpFieldNumber = 7,
        };
        // int32 game_time = 1;
        void clear_game_time();
        int32_t game_time() const;
        void set_game_time(int32_t value);

    private:
        int32_t _internal_game_time() const;
        void _internal_set_game_time(int32_t value);

    public:
        // int32 red_team_score = 2;
        void clear_red_team_score();
        int32_t red_team_score() const;
        void set_red_team_score(int32_t value);

    private:
        int32_t _internal_red_team_score() const;
        void _internal_set_red_team_score(int32_t value);

    public:
        // int32 blue_team_score = 3;
        void clear_blue_team_score();
        int32_t blue_team_score() const;
        void set_blue_team_score(int32_t value);

    private:
        int32_t _internal_blue_team_score() const;
        void _internal_set_blue_team_score(int32_t value);

    public:
        // int32 red_team_energy = 4;
        void clear_red_team_energy();
        int32_t red_team_energy() const;
        void set_red_team_energy(int32_t value);

    private:
        int32_t _internal_red_team_energy() const;
        void _internal_set_red_team_energy(int32_t value);

    public:
        // int32 blue_team_energy = 5;
        void clear_blue_team_energy();
        int32_t blue_team_energy() const;
        void set_blue_team_energy(int32_t value);

    private:
        int32_t _internal_blue_team_energy() const;
        void _internal_set_blue_team_energy(int32_t value);

    public:
        // int32 red_home_hp = 6;
        void clear_red_home_hp();
        int32_t red_home_hp() const;
        void set_red_home_hp(int32_t value);

    private:
        int32_t _internal_red_home_hp() const;
        void _internal_set_red_home_hp(int32_t value);

    public:
        // int32 blue_home_hp = 7;
        void clear_blue_home_hp();
        int32_t blue_home_hp() const;
        void set_blue_home_hp(int32_t value);

    private:
        int32_t _internal_blue_home_hp() const;
        void _internal_set_blue_home_hp(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfAll)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int32_t game_time_;
            int32_t red_team_score_;
            int32_t blue_team_score_;
            int32_t red_team_energy_;
            int32_t blue_team_energy_;
            int32_t red_home_hp_;
            int32_t blue_home_hp_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageToClient final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageToClient) */
    {
    public:
        inline MessageToClient() :
            MessageToClient(nullptr)
        {
        }
        ~MessageToClient() override;
        explicit PROTOBUF_CONSTEXPR MessageToClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageToClient(const MessageToClient& from);
        MessageToClient(MessageToClient&& from) noexcept
            :
            MessageToClient()
        {
            *this = ::std::move(from);
        }

        inline MessageToClient& operator=(const MessageToClient& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageToClient& operator=(MessageToClient&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageToClient& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageToClient* internal_default_instance()
        {
            return reinterpret_cast<const MessageToClient*>(
                &_MessageToClient_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            14;

        friend void swap(MessageToClient& a, MessageToClient& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageToClient* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageToClient* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageToClient>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageToClient& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageToClient& from)
        {
            MessageToClient::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageToClient* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageToClient";
        }

    protected:
        explicit MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kObjMessageFieldNumber = 1,
            kAllMessageFieldNumber = 3,
            kGameStateFieldNumber = 2,
        };
        // repeated .protobuf.MessageOfObj obj_message = 1;
        int obj_message_size() const;

    private:
        int _internal_obj_message_size() const;

    public:
        void clear_obj_message();
        ::protobuf::MessageOfObj* mutable_obj_message(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfObj>*
            mutable_obj_message();

    private:
        const ::protobuf::MessageOfObj& _internal_obj_message(int index) const;
        ::protobuf::MessageOfObj* _internal_add_obj_message();

    public:
        const ::protobuf::MessageOfObj& obj_message(int index) const;
        ::protobuf::MessageOfObj* add_obj_message();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfObj>&
            obj_message() const;

        // .protobuf.MessageOfAll all_message = 3;
        bool has_all_message() const;

    private:
        bool _internal_has_all_message() const;

    public:
        void clear_all_message();
        const ::protobuf::MessageOfAll& all_message() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfAll* release_all_message();
        ::protobuf::MessageOfAll* mutable_all_message();
        void set_allocated_all_message(::protobuf::MessageOfAll* all_message);

    private:
        const ::protobuf::MessageOfAll& _internal_all_message() const;
        ::protobuf::MessageOfAll* _internal_mutable_all_message();

    public:
        void unsafe_arena_set_allocated_all_message(
            ::protobuf::MessageOfAll* all_message
        );
        ::protobuf::MessageOfAll* unsafe_arena_release_all_message();

        // .protobuf.GameState game_state = 2;
        void clear_game_state();
        ::protobuf::GameState game_state() const;
        void set_game_state(::protobuf::GameState value);

    private:
        ::protobuf::GameState _internal_game_state() const;
        void _internal_set_game_state(::protobuf::GameState value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageToClient)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfObj> obj_message_;
            ::protobuf::MessageOfAll* all_message_;
            int game_state_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MoveRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MoveRes) */
    {
    public:
        inline MoveRes() :
            MoveRes(nullptr)
        {
        }
        ~MoveRes() override;
        explicit PROTOBUF_CONSTEXPR MoveRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MoveRes(const MoveRes& from);
        MoveRes(MoveRes&& from) noexcept
            :
            MoveRes()
        {
            *this = ::std::move(from);
        }

        inline MoveRes& operator=(const MoveRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MoveRes& operator=(MoveRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MoveRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MoveRes* internal_default_instance()
        {
            return reinterpret_cast<const MoveRes*>(
                &_MoveRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            15;

        friend void swap(MoveRes& a, MoveRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MoveRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MoveRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MoveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MoveRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MoveRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MoveRes& from)
        {
            MoveRes::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MoveRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MoveRes";
        }

    protected:
        explicit MoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kActualSpeedFieldNumber = 1,
            kActualAngleFieldNumber = 2,
            kActSuccessFieldNumber = 3,
        };
        // int64 actual_speed = 1;
        void clear_actual_speed();
        int64_t actual_speed() const;
        void set_actual_speed(int64_t value);

    private:
        int64_t _internal_actual_speed() const;
        void _internal_set_actual_speed(int64_t value);

    public:
        // double actual_angle = 2;
        void clear_actual_angle();
        double actual_angle() const;
        void set_actual_angle(double value);

    private:
        double _internal_actual_angle() const;
        void _internal_set_actual_angle(double value);

    public:
        // bool act_success = 3;
        void clear_act_success();
        bool act_success() const;
        void set_act_success(bool value);

    private:
        bool _internal_act_success() const;
        void _internal_set_act_success(bool value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MoveRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int64_t actual_speed_;
            double actual_angle_;
            bool act_success_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class BuildShipRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BuildShipRes) */
    {
    public:
        inline BuildShipRes() :
            BuildShipRes(nullptr)
        {
        }
        ~BuildShipRes() override;
        explicit PROTOBUF_CONSTEXPR BuildShipRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BuildShipRes(const BuildShipRes& from);
        BuildShipRes(BuildShipRes&& from) noexcept
            :
            BuildShipRes()
        {
            *this = ::std::move(from);
        }

        inline BuildShipRes& operator=(const BuildShipRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BuildShipRes& operator=(BuildShipRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BuildShipRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BuildShipRes* internal_default_instance()
        {
            return reinterpret_cast<const BuildShipRes*>(
                &_BuildShipRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            16;

        friend void swap(BuildShipRes& a, BuildShipRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BuildShipRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BuildShipRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BuildShipRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BuildShipRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BuildShipRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BuildShipRes& from)
        {
            BuildShipRes::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BuildShipRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BuildShipRes";
        }

    protected:
        explicit BuildShipRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 2,
            kActSuccessFieldNumber = 1,
        };
        // int64 player_id = 2;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // bool act_success = 1;
        void clear_act_success();
        bool act_success() const;
        void set_act_success(bool value);

    private:
        bool _internal_act_success() const;
        void _internal_set_act_success(bool value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BuildShipRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int64_t player_id_;
            bool act_success_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class BoolRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BoolRes) */
    {
    public:
        inline BoolRes() :
            BoolRes(nullptr)
        {
        }
        ~BoolRes() override;
        explicit PROTOBUF_CONSTEXPR BoolRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BoolRes(const BoolRes& from);
        BoolRes(BoolRes&& from) noexcept
            :
            BoolRes()
        {
            *this = ::std::move(from);
        }

        inline BoolRes& operator=(const BoolRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BoolRes& operator=(BoolRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BoolRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BoolRes* internal_default_instance()
        {
            return reinterpret_cast<const BoolRes*>(
                &_BoolRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            17;

        friend void swap(BoolRes& a, BoolRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BoolRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BoolRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BoolRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BoolRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BoolRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BoolRes& from)
        {
            BoolRes::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BoolRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BoolRes";
        }

    protected:
        explicit BoolRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kActSuccessFieldNumber = 1,
        };
        // bool act_success = 1;
        void clear_act_success();
        bool act_success() const;
        void set_act_success(bool value);

    private:
        bool _internal_act_success() const;
        void _internal_set_act_success(bool value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BoolRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            bool act_success_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class ShipInfoRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ShipInfoRes) */
    {
    public:
        inline ShipInfoRes() :
            ShipInfoRes(nullptr)
        {
        }
        ~ShipInfoRes() override;
        explicit PROTOBUF_CONSTEXPR ShipInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ShipInfoRes(const ShipInfoRes& from);
        ShipInfoRes(ShipInfoRes&& from) noexcept
            :
            ShipInfoRes()
        {
            *this = ::std::move(from);
        }

        inline ShipInfoRes& operator=(const ShipInfoRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline ShipInfoRes& operator=(ShipInfoRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const ShipInfoRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const ShipInfoRes* internal_default_instance()
        {
            return reinterpret_cast<const ShipInfoRes*>(
                &_ShipInfoRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            18;

        friend void swap(ShipInfoRes& a, ShipInfoRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(ShipInfoRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ShipInfoRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ShipInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<ShipInfoRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ShipInfoRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const ShipInfoRes& from)
        {
            ShipInfoRes::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ShipInfoRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.ShipInfoRes";
        }

    protected:
        explicit ShipInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipInfoFieldNumber = 1,
        };
        // repeated .protobuf.MessageOfShip ship_info = 1;
        int ship_info_size() const;

    private:
        int _internal_ship_info_size() const;

    public:
        void clear_ship_info();
        ::protobuf::MessageOfShip* mutable_ship_info(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfShip>*
            mutable_ship_info();

    private:
        const ::protobuf::MessageOfShip& _internal_ship_info(int index) const;
        ::protobuf::MessageOfShip* _internal_add_ship_info();

    public:
        const ::protobuf::MessageOfShip& ship_info(int index) const;
        ::protobuf::MessageOfShip* add_ship_info();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfShip>&
            ship_info() const;

        // @@protoc_insertion_point(class_scope:protobuf.ShipInfoRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfShip> ship_info_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class EcoRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.EcoRes) */
    {
    public:
        inline EcoRes() :
            EcoRes(nullptr)
        {
        }
        ~EcoRes() override;
        explicit PROTOBUF_CONSTEXPR EcoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        EcoRes(const EcoRes& from);
        EcoRes(EcoRes&& from) noexcept
            :
            EcoRes()
        {
            *this = ::std::move(from);
        }

        inline EcoRes& operator=(const EcoRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline EcoRes& operator=(EcoRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const EcoRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const EcoRes* internal_default_instance()
        {
            return reinterpret_cast<const EcoRes*>(
                &_EcoRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            19;

        friend void swap(EcoRes& a, EcoRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(EcoRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(EcoRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        EcoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<EcoRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const EcoRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const EcoRes& from)
        {
            EcoRes::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(EcoRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.EcoRes";
        }

    protected:
        explicit EcoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kEconomyFieldNumber = 1,
        };
        // int64 economy = 1;
        void clear_economy();
        int64_t economy() const;
        void set_economy(int64_t value);

    private:
        int64_t _internal_economy() const;
        void _internal_set_economy(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.EcoRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int64_t economy_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfNews final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfNews) */
    {
    public:
        inline MessageOfNews() :
            MessageOfNews(nullptr)
        {
        }
        ~MessageOfNews() override;
        explicit PROTOBUF_CONSTEXPR MessageOfNews(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfNews(const MessageOfNews& from);
        MessageOfNews(MessageOfNews&& from) noexcept
            :
            MessageOfNews()
        {
            *this = ::std::move(from);
        }

        inline MessageOfNews& operator=(const MessageOfNews& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfNews& operator=(MessageOfNews&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfNews& default_instance()
        {
            return *internal_default_instance();
        }
        enum NewsCase
        {
            kTextMessage = 1,
            kBinaryMessage = 2,
            NEWS_NOT_SET = 0,
        };

        static inline const MessageOfNews* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfNews*>(
                &_MessageOfNews_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            20;

        friend void swap(MessageOfNews& a, MessageOfNews& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfNews* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfNews* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfNews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfNews>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfNews& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfNews& from)
        {
            MessageOfNews::MergeImpl(*this, from);
        }

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _impl_._cached_size_.Get();
        }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfNews* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfNews";
        }

    protected:
        explicit MessageOfNews(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kFromIdFieldNumber = 3,
            kToIdFieldNumber = 4,
            kTeamIdFieldNumber = 5,
            kTextMessageFieldNumber = 1,
            kBinaryMessageFieldNumber = 2,
        };
        // int64 from_id = 3;
        void clear_from_id();
        int64_t from_id() const;
        void set_from_id(int64_t value);

    private:
        int64_t _internal_from_id() const;
        void _internal_set_from_id(int64_t value);

    public:
        // int64 to_id = 4;
        void clear_to_id();
        int64_t to_id() const;
        void set_to_id(int64_t value);

    private:
        int64_t _internal_to_id() const;
        void _internal_set_to_id(int64_t value);

    public:
        // int64 team_id = 5;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // string text_message = 1;
        bool has_text_message() const;

    private:
        bool _internal_has_text_message() const;

    public:
        void clear_text_message();
        const std::string& text_message() const;
        template<typename ArgT0 = const std::string&, typename... ArgT>
        void set_text_message(ArgT0&& arg0, ArgT... args);
        std::string* mutable_text_message();
        PROTOBUF_NODISCARD std::string* release_text_message();
        void set_allocated_text_message(std::string* text_message);

    private:
        const std::string& _internal_text_message() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_message(const std::string& value);
        std::string* _internal_mutable_text_message();

    public:
        // bytes binary_message = 2;
        bool has_binary_message() const;

    private:
        bool _internal_has_binary_message() const;

    public:
        void clear_binary_message();
        const std::string& binary_message() const;
        template<typename ArgT0 = const std::string&, typename... ArgT>
        void set_binary_message(ArgT0&& arg0, ArgT... args);
        std::string* mutable_binary_message();
        PROTOBUF_NODISCARD std::string* release_binary_message();
        void set_allocated_binary_message(std::string* binary_message);

    private:
        const std::string& _internal_binary_message() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_message(const std::string& value);
        std::string* _internal_mutable_binary_message();

    public:
        void clear_news();
        NewsCase news_case() const;
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfNews)

    private:
        class _Internal;
        void set_has_text_message();
        void set_has_binary_message();

        inline bool has_news() const;
        inline void clear_has_news();

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_
        {
            int64_t from_id_;
            int64_t to_id_;
            int64_t team_id_;
            union NewsUnion
            {
                constexpr NewsUnion() :
                    _constinit_{}
                {
                }
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
                ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_message_;
                ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_message_;
            } news_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
            uint32_t _oneof_case_[1];
        };
        union
        {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
    // MessageOfShip

    // int32 x = 1;
    inline void MessageOfShip::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfShip::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfShip::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.x)
        return _internal_x();
    }
    inline void MessageOfShip::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfShip::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.x)
    }

    // int32 y = 2;
    inline void MessageOfShip::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfShip::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfShip::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.y)
        return _internal_y();
    }
    inline void MessageOfShip::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfShip::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.y)
    }

    // int32 speed = 3;
    inline void MessageOfShip::clear_speed()
    {
        _impl_.speed_ = 0;
    }
    inline int32_t MessageOfShip::_internal_speed() const
    {
        return _impl_.speed_;
    }
    inline int32_t MessageOfShip::speed() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.speed)
        return _internal_speed();
    }
    inline void MessageOfShip::_internal_set_speed(int32_t value)
    {
        _impl_.speed_ = value;
    }
    inline void MessageOfShip::set_speed(int32_t value)
    {
        _internal_set_speed(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.speed)
    }

    // int32 hp = 4;
    inline void MessageOfShip::clear_hp()
    {
        _impl_.hp_ = 0;
    }
    inline int32_t MessageOfShip::_internal_hp() const
    {
        return _impl_.hp_;
    }
    inline int32_t MessageOfShip::hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.hp)
        return _internal_hp();
    }
    inline void MessageOfShip::_internal_set_hp(int32_t value)
    {
        _impl_.hp_ = value;
    }
    inline void MessageOfShip::set_hp(int32_t value)
    {
        _internal_set_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.hp)
    }

    // int32 armor = 5;
    inline void MessageOfShip::clear_armor()
    {
        _impl_.armor_ = 0;
    }
    inline int32_t MessageOfShip::_internal_armor() const
    {
        return _impl_.armor_;
    }
    inline int32_t MessageOfShip::armor() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.armor)
        return _internal_armor();
    }
    inline void MessageOfShip::_internal_set_armor(int32_t value)
    {
        _impl_.armor_ = value;
    }
    inline void MessageOfShip::set_armor(int32_t value)
    {
        _internal_set_armor(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.armor)
    }

    // int32 shield = 6;
    inline void MessageOfShip::clear_shield()
    {
        _impl_.shield_ = 0;
    }
    inline int32_t MessageOfShip::_internal_shield() const
    {
        return _impl_.shield_;
    }
    inline int32_t MessageOfShip::shield() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.shield)
        return _internal_shield();
    }
    inline void MessageOfShip::_internal_set_shield(int32_t value)
    {
        _impl_.shield_ = value;
    }
    inline void MessageOfShip::set_shield(int32_t value)
    {
        _internal_set_shield(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.shield)
    }

    // int64 team_id = 7;
    inline void MessageOfShip::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfShip::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfShip::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.team_id)
        return _internal_team_id();
    }
    inline void MessageOfShip::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfShip::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.team_id)
    }

    // int64 player_id = 8;
    inline void MessageOfShip::clear_player_id()
    {
        _impl_.player_id_ = int64_t{0};
    }
    inline int64_t MessageOfShip::_internal_player_id() const
    {
        return _impl_.player_id_;
    }
    inline int64_t MessageOfShip::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.player_id)
        return _internal_player_id();
    }
    inline void MessageOfShip::_internal_set_player_id(int64_t value)
    {
        _impl_.player_id_ = value;
    }
    inline void MessageOfShip::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.player_id)
    }

    // int64 guid = 9;
    inline void MessageOfShip::clear_guid()
    {
        _impl_.guid_ = int64_t{0};
    }
    inline int64_t MessageOfShip::_internal_guid() const
    {
        return _impl_.guid_;
    }
    inline int64_t MessageOfShip::guid() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.guid)
        return _internal_guid();
    }
    inline void MessageOfShip::_internal_set_guid(int64_t value)
    {
        _impl_.guid_ = value;
    }
    inline void MessageOfShip::set_guid(int64_t value)
    {
        _internal_set_guid(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.guid)
    }

    // .protobuf.ShipState ship_state = 10;
    inline void MessageOfShip::clear_ship_state()
    {
        _impl_.ship_state_ = 0;
    }
    inline ::protobuf::ShipState MessageOfShip::_internal_ship_state() const
    {
        return static_cast<::protobuf::ShipState>(_impl_.ship_state_);
    }
    inline ::protobuf::ShipState MessageOfShip::ship_state() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.ship_state)
        return _internal_ship_state();
    }
    inline void MessageOfShip::_internal_set_ship_state(::protobuf::ShipState value)
    {
        _impl_.ship_state_ = value;
    }
    inline void MessageOfShip::set_ship_state(::protobuf::ShipState value)
    {
        _internal_set_ship_state(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.ship_state)
    }

    // .protobuf.ShipType ship_type = 11;
    inline void MessageOfShip::clear_ship_type()
    {
        _impl_.ship_type_ = 0;
    }
    inline ::protobuf::ShipType MessageOfShip::_internal_ship_type() const
    {
        return static_cast<::protobuf::ShipType>(_impl_.ship_type_);
    }
    inline ::protobuf::ShipType MessageOfShip::ship_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.ship_type)
        return _internal_ship_type();
    }
    inline void MessageOfShip::_internal_set_ship_type(::protobuf::ShipType value)
    {
        _impl_.ship_type_ = value;
    }
    inline void MessageOfShip::set_ship_type(::protobuf::ShipType value)
    {
        _internal_set_ship_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.ship_type)
    }

    // int32 view_range = 12;
    inline void MessageOfShip::clear_view_range()
    {
        _impl_.view_range_ = 0;
    }
    inline int32_t MessageOfShip::_internal_view_range() const
    {
        return _impl_.view_range_;
    }
    inline int32_t MessageOfShip::view_range() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.view_range)
        return _internal_view_range();
    }
    inline void MessageOfShip::_internal_set_view_range(int32_t value)
    {
        _impl_.view_range_ = value;
    }
    inline void MessageOfShip::set_view_range(int32_t value)
    {
        _internal_set_view_range(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.view_range)
    }

    // .protobuf.ProducerType producer_type = 13;
    inline void MessageOfShip::clear_producer_type()
    {
        _impl_.producer_type_ = 0;
    }
    inline ::protobuf::ProducerType MessageOfShip::_internal_producer_type() const
    {
        return static_cast<::protobuf::ProducerType>(_impl_.producer_type_);
    }
    inline ::protobuf::ProducerType MessageOfShip::producer_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.producer_type)
        return _internal_producer_type();
    }
    inline void MessageOfShip::_internal_set_producer_type(::protobuf::ProducerType value)
    {
        _impl_.producer_type_ = value;
    }
    inline void MessageOfShip::set_producer_type(::protobuf::ProducerType value)
    {
        _internal_set_producer_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.producer_type)
    }

    // .protobuf.ConstructorType constructor_type = 14;
    inline void MessageOfShip::clear_constructor_type()
    {
        _impl_.constructor_type_ = 0;
    }
    inline ::protobuf::ConstructorType MessageOfShip::_internal_constructor_type() const
    {
        return static_cast<::protobuf::ConstructorType>(_impl_.constructor_type_);
    }
    inline ::protobuf::ConstructorType MessageOfShip::constructor_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.constructor_type)
        return _internal_constructor_type();
    }
    inline void MessageOfShip::_internal_set_constructor_type(::protobuf::ConstructorType value)
    {
        _impl_.constructor_type_ = value;
    }
    inline void MessageOfShip::set_constructor_type(::protobuf::ConstructorType value)
    {
        _internal_set_constructor_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.constructor_type)
    }

    // .protobuf.ArmorType armor_type = 15;
    inline void MessageOfShip::clear_armor_type()
    {
        _impl_.armor_type_ = 0;
    }
    inline ::protobuf::ArmorType MessageOfShip::_internal_armor_type() const
    {
        return static_cast<::protobuf::ArmorType>(_impl_.armor_type_);
    }
    inline ::protobuf::ArmorType MessageOfShip::armor_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.armor_type)
        return _internal_armor_type();
    }
    inline void MessageOfShip::_internal_set_armor_type(::protobuf::ArmorType value)
    {
        _impl_.armor_type_ = value;
    }
    inline void MessageOfShip::set_armor_type(::protobuf::ArmorType value)
    {
        _internal_set_armor_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.armor_type)
    }

    // .protobuf.ShieldType shield_type = 16;
    inline void MessageOfShip::clear_shield_type()
    {
        _impl_.shield_type_ = 0;
    }
    inline ::protobuf::ShieldType MessageOfShip::_internal_shield_type() const
    {
        return static_cast<::protobuf::ShieldType>(_impl_.shield_type_);
    }
    inline ::protobuf::ShieldType MessageOfShip::shield_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.shield_type)
        return _internal_shield_type();
    }
    inline void MessageOfShip::_internal_set_shield_type(::protobuf::ShieldType value)
    {
        _impl_.shield_type_ = value;
    }
    inline void MessageOfShip::set_shield_type(::protobuf::ShieldType value)
    {
        _internal_set_shield_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.shield_type)
    }

    // .protobuf.WeaponType weapon_type = 17;
    inline void MessageOfShip::clear_weapon_type()
    {
        _impl_.weapon_type_ = 0;
    }
    inline ::protobuf::WeaponType MessageOfShip::_internal_weapon_type() const
    {
        return static_cast<::protobuf::WeaponType>(_impl_.weapon_type_);
    }
    inline ::protobuf::WeaponType MessageOfShip::weapon_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.weapon_type)
        return _internal_weapon_type();
    }
    inline void MessageOfShip::_internal_set_weapon_type(::protobuf::WeaponType value)
    {
        _impl_.weapon_type_ = value;
    }
    inline void MessageOfShip::set_weapon_type(::protobuf::WeaponType value)
    {
        _internal_set_weapon_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.weapon_type)
    }

    // double facing_direction = 18;
    inline void MessageOfShip::clear_facing_direction()
    {
        _impl_.facing_direction_ = 0;
    }
    inline double MessageOfShip::_internal_facing_direction() const
    {
        return _impl_.facing_direction_;
    }
    inline double MessageOfShip::facing_direction() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfShip.facing_direction)
        return _internal_facing_direction();
    }
    inline void MessageOfShip::_internal_set_facing_direction(double value)
    {
        _impl_.facing_direction_ = value;
    }
    inline void MessageOfShip::set_facing_direction(double value)
    {
        _internal_set_facing_direction(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfShip.facing_direction)
    }

    // -------------------------------------------------------------------

    // MessageOfBullet

    // .protobuf.BulletType type = 1;
    inline void MessageOfBullet::clear_type()
    {
        _impl_.type_ = 0;
    }
    inline ::protobuf::BulletType MessageOfBullet::_internal_type() const
    {
        return static_cast<::protobuf::BulletType>(_impl_.type_);
    }
    inline ::protobuf::BulletType MessageOfBullet::type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.type)
        return _internal_type();
    }
    inline void MessageOfBullet::_internal_set_type(::protobuf::BulletType value)
    {
        _impl_.type_ = value;
    }
    inline void MessageOfBullet::set_type(::protobuf::BulletType value)
    {
        _internal_set_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.type)
    }

    // int32 x = 2;
    inline void MessageOfBullet::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfBullet::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfBullet::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.x)
        return _internal_x();
    }
    inline void MessageOfBullet::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfBullet::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.x)
    }

    // int32 y = 3;
    inline void MessageOfBullet::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfBullet::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfBullet::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.y)
        return _internal_y();
    }
    inline void MessageOfBullet::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfBullet::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.y)
    }

    // double facing_direction = 4;
    inline void MessageOfBullet::clear_facing_direction()
    {
        _impl_.facing_direction_ = 0;
    }
    inline double MessageOfBullet::_internal_facing_direction() const
    {
        return _impl_.facing_direction_;
    }
    inline double MessageOfBullet::facing_direction() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.facing_direction)
        return _internal_facing_direction();
    }
    inline void MessageOfBullet::_internal_set_facing_direction(double value)
    {
        _impl_.facing_direction_ = value;
    }
    inline void MessageOfBullet::set_facing_direction(double value)
    {
        _internal_set_facing_direction(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.facing_direction)
    }

    // int32 damage = 5;
    inline void MessageOfBullet::clear_damage()
    {
        _impl_.damage_ = 0;
    }
    inline int32_t MessageOfBullet::_internal_damage() const
    {
        return _impl_.damage_;
    }
    inline int32_t MessageOfBullet::damage() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.damage)
        return _internal_damage();
    }
    inline void MessageOfBullet::_internal_set_damage(int32_t value)
    {
        _impl_.damage_ = value;
    }
    inline void MessageOfBullet::set_damage(int32_t value)
    {
        _internal_set_damage(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.damage)
    }

    // int64 team_id = 6;
    inline void MessageOfBullet::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfBullet::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfBullet::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.team_id)
        return _internal_team_id();
    }
    inline void MessageOfBullet::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfBullet::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.team_id)
    }

    // int64 guid = 7;
    inline void MessageOfBullet::clear_guid()
    {
        _impl_.guid_ = int64_t{0};
    }
    inline int64_t MessageOfBullet::_internal_guid() const
    {
        return _impl_.guid_;
    }
    inline int64_t MessageOfBullet::guid() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.guid)
        return _internal_guid();
    }
    inline void MessageOfBullet::_internal_set_guid(int64_t value)
    {
        _impl_.guid_ = value;
    }
    inline void MessageOfBullet::set_guid(int64_t value)
    {
        _internal_set_guid(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.guid)
    }

    // double bomb_range = 8;
    inline void MessageOfBullet::clear_bomb_range()
    {
        _impl_.bomb_range_ = 0;
    }
    inline double MessageOfBullet::_internal_bomb_range() const
    {
        return _impl_.bomb_range_;
    }
    inline double MessageOfBullet::bomb_range() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.bomb_range)
        return _internal_bomb_range();
    }
    inline void MessageOfBullet::_internal_set_bomb_range(double value)
    {
        _impl_.bomb_range_ = value;
    }
    inline void MessageOfBullet::set_bomb_range(double value)
    {
        _internal_set_bomb_range(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.bomb_range)
    }

    // int32 speed = 9;
    inline void MessageOfBullet::clear_speed()
    {
        _impl_.speed_ = 0;
    }
    inline int32_t MessageOfBullet::_internal_speed() const
    {
        return _impl_.speed_;
    }
    inline int32_t MessageOfBullet::speed() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBullet.speed)
        return _internal_speed();
    }
    inline void MessageOfBullet::_internal_set_speed(int32_t value)
    {
        _impl_.speed_ = value;
    }
    inline void MessageOfBullet::set_speed(int32_t value)
    {
        _internal_set_speed(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBullet.speed)
    }

    // -------------------------------------------------------------------

    // MessageOfBombedBullet

    // .protobuf.BulletType type = 1;
    inline void MessageOfBombedBullet::clear_type()
    {
        _impl_.type_ = 0;
    }
    inline ::protobuf::BulletType MessageOfBombedBullet::_internal_type() const
    {
        return static_cast<::protobuf::BulletType>(_impl_.type_);
    }
    inline ::protobuf::BulletType MessageOfBombedBullet::type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBombedBullet.type)
        return _internal_type();
    }
    inline void MessageOfBombedBullet::_internal_set_type(::protobuf::BulletType value)
    {
        _impl_.type_ = value;
    }
    inline void MessageOfBombedBullet::set_type(::protobuf::BulletType value)
    {
        _internal_set_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBombedBullet.type)
    }

    // int32 x = 2;
    inline void MessageOfBombedBullet::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfBombedBullet::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfBombedBullet::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBombedBullet.x)
        return _internal_x();
    }
    inline void MessageOfBombedBullet::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfBombedBullet::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBombedBullet.x)
    }

    // int32 y = 3;
    inline void MessageOfBombedBullet::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfBombedBullet::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfBombedBullet::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBombedBullet.y)
        return _internal_y();
    }
    inline void MessageOfBombedBullet::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfBombedBullet::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBombedBullet.y)
    }

    // double facing_direction = 4;
    inline void MessageOfBombedBullet::clear_facing_direction()
    {
        _impl_.facing_direction_ = 0;
    }
    inline double MessageOfBombedBullet::_internal_facing_direction() const
    {
        return _impl_.facing_direction_;
    }
    inline double MessageOfBombedBullet::facing_direction() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBombedBullet.facing_direction)
        return _internal_facing_direction();
    }
    inline void MessageOfBombedBullet::_internal_set_facing_direction(double value)
    {
        _impl_.facing_direction_ = value;
    }
    inline void MessageOfBombedBullet::set_facing_direction(double value)
    {
        _internal_set_facing_direction(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBombedBullet.facing_direction)
    }

    // int64 mapping_id = 5;
    inline void MessageOfBombedBullet::clear_mapping_id()
    {
        _impl_.mapping_id_ = int64_t{0};
    }
    inline int64_t MessageOfBombedBullet::_internal_mapping_id() const
    {
        return _impl_.mapping_id_;
    }
    inline int64_t MessageOfBombedBullet::mapping_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBombedBullet.mapping_id)
        return _internal_mapping_id();
    }
    inline void MessageOfBombedBullet::_internal_set_mapping_id(int64_t value)
    {
        _impl_.mapping_id_ = value;
    }
    inline void MessageOfBombedBullet::set_mapping_id(int64_t value)
    {
        _internal_set_mapping_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBombedBullet.mapping_id)
    }

    // double bomb_range = 6;
    inline void MessageOfBombedBullet::clear_bomb_range()
    {
        _impl_.bomb_range_ = 0;
    }
    inline double MessageOfBombedBullet::_internal_bomb_range() const
    {
        return _impl_.bomb_range_;
    }
    inline double MessageOfBombedBullet::bomb_range() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfBombedBullet.bomb_range)
        return _internal_bomb_range();
    }
    inline void MessageOfBombedBullet::_internal_set_bomb_range(double value)
    {
        _impl_.bomb_range_ = value;
    }
    inline void MessageOfBombedBullet::set_bomb_range(double value)
    {
        _internal_set_bomb_range(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfBombedBullet.bomb_range)
    }

    // -------------------------------------------------------------------

    // MessageOfFactory

    // int32 x = 1;
    inline void MessageOfFactory::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfFactory::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfFactory::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFactory.x)
        return _internal_x();
    }
    inline void MessageOfFactory::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfFactory::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFactory.x)
    }

    // int32 y = 2;
    inline void MessageOfFactory::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfFactory::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfFactory::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFactory.y)
        return _internal_y();
    }
    inline void MessageOfFactory::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfFactory::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFactory.y)
    }

    // int32 hp = 3;
    inline void MessageOfFactory::clear_hp()
    {
        _impl_.hp_ = 0;
    }
    inline int32_t MessageOfFactory::_internal_hp() const
    {
        return _impl_.hp_;
    }
    inline int32_t MessageOfFactory::hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFactory.hp)
        return _internal_hp();
    }
    inline void MessageOfFactory::_internal_set_hp(int32_t value)
    {
        _impl_.hp_ = value;
    }
    inline void MessageOfFactory::set_hp(int32_t value)
    {
        _internal_set_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFactory.hp)
    }

    // int64 team_id = 4;
    inline void MessageOfFactory::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfFactory::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfFactory::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFactory.team_id)
        return _internal_team_id();
    }
    inline void MessageOfFactory::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfFactory::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFactory.team_id)
    }

    // -------------------------------------------------------------------

    // MessageOfCommunity

    // int32 x = 1;
    inline void MessageOfCommunity::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfCommunity::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfCommunity::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfCommunity.x)
        return _internal_x();
    }
    inline void MessageOfCommunity::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfCommunity::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfCommunity.x)
    }

    // int32 y = 2;
    inline void MessageOfCommunity::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfCommunity::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfCommunity::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfCommunity.y)
        return _internal_y();
    }
    inline void MessageOfCommunity::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfCommunity::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfCommunity.y)
    }

    // int32 hp = 3;
    inline void MessageOfCommunity::clear_hp()
    {
        _impl_.hp_ = 0;
    }
    inline int32_t MessageOfCommunity::_internal_hp() const
    {
        return _impl_.hp_;
    }
    inline int32_t MessageOfCommunity::hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfCommunity.hp)
        return _internal_hp();
    }
    inline void MessageOfCommunity::_internal_set_hp(int32_t value)
    {
        _impl_.hp_ = value;
    }
    inline void MessageOfCommunity::set_hp(int32_t value)
    {
        _internal_set_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfCommunity.hp)
    }

    // int64 team_id = 4;
    inline void MessageOfCommunity::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfCommunity::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfCommunity::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfCommunity.team_id)
        return _internal_team_id();
    }
    inline void MessageOfCommunity::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfCommunity::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfCommunity.team_id)
    }

    // -------------------------------------------------------------------

    // MessageOfFort

    // int32 x = 1;
    inline void MessageOfFort::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfFort::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfFort::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFort.x)
        return _internal_x();
    }
    inline void MessageOfFort::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfFort::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFort.x)
    }

    // int32 y = 2;
    inline void MessageOfFort::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfFort::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfFort::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFort.y)
        return _internal_y();
    }
    inline void MessageOfFort::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfFort::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFort.y)
    }

    // int32 hp = 3;
    inline void MessageOfFort::clear_hp()
    {
        _impl_.hp_ = 0;
    }
    inline int32_t MessageOfFort::_internal_hp() const
    {
        return _impl_.hp_;
    }
    inline int32_t MessageOfFort::hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFort.hp)
        return _internal_hp();
    }
    inline void MessageOfFort::_internal_set_hp(int32_t value)
    {
        _impl_.hp_ = value;
    }
    inline void MessageOfFort::set_hp(int32_t value)
    {
        _internal_set_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFort.hp)
    }

    // int64 team_id = 4;
    inline void MessageOfFort::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfFort::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfFort::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfFort.team_id)
        return _internal_team_id();
    }
    inline void MessageOfFort::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfFort::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfFort.team_id)
    }

    // -------------------------------------------------------------------

    // MessageOfWormhole

    // int32 x = 1;
    inline void MessageOfWormhole::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfWormhole::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfWormhole::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfWormhole.x)
        return _internal_x();
    }
    inline void MessageOfWormhole::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfWormhole::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfWormhole.x)
    }

    // int32 y = 2;
    inline void MessageOfWormhole::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfWormhole::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfWormhole::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfWormhole.y)
        return _internal_y();
    }
    inline void MessageOfWormhole::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfWormhole::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfWormhole.y)
    }

    // int32 hp = 3;
    inline void MessageOfWormhole::clear_hp()
    {
        _impl_.hp_ = 0;
    }
    inline int32_t MessageOfWormhole::_internal_hp() const
    {
        return _impl_.hp_;
    }
    inline int32_t MessageOfWormhole::hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfWormhole.hp)
        return _internal_hp();
    }
    inline void MessageOfWormhole::_internal_set_hp(int32_t value)
    {
        _impl_.hp_ = value;
    }
    inline void MessageOfWormhole::set_hp(int32_t value)
    {
        _internal_set_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfWormhole.hp)
    }

    // int32 id = 4;
    inline void MessageOfWormhole::clear_id()
    {
        _impl_.id_ = 0;
    }
    inline int32_t MessageOfWormhole::_internal_id() const
    {
        return _impl_.id_;
    }
    inline int32_t MessageOfWormhole::id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfWormhole.id)
        return _internal_id();
    }
    inline void MessageOfWormhole::_internal_set_id(int32_t value)
    {
        _impl_.id_ = value;
    }
    inline void MessageOfWormhole::set_id(int32_t value)
    {
        _internal_set_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfWormhole.id)
    }

    // -------------------------------------------------------------------

    // MessageOfResource

    // int32 x = 1;
    inline void MessageOfResource::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfResource::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfResource::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfResource.x)
        return _internal_x();
    }
    inline void MessageOfResource::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfResource::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfResource.x)
    }

    // int32 y = 2;
    inline void MessageOfResource::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfResource::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfResource::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfResource.y)
        return _internal_y();
    }
    inline void MessageOfResource::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfResource::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfResource.y)
    }

    // int32 progress = 3;
    inline void MessageOfResource::clear_progress()
    {
        _impl_.progress_ = 0;
    }
    inline int32_t MessageOfResource::_internal_progress() const
    {
        return _impl_.progress_;
    }
    inline int32_t MessageOfResource::progress() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfResource.progress)
        return _internal_progress();
    }
    inline void MessageOfResource::_internal_set_progress(int32_t value)
    {
        _impl_.progress_ = value;
    }
    inline void MessageOfResource::set_progress(int32_t value)
    {
        _internal_set_progress(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfResource.progress)
    }

    // -------------------------------------------------------------------

    // MessageOfHome

    // int32 x = 1;
    inline void MessageOfHome::clear_x()
    {
        _impl_.x_ = 0;
    }
    inline int32_t MessageOfHome::_internal_x() const
    {
        return _impl_.x_;
    }
    inline int32_t MessageOfHome::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHome.x)
        return _internal_x();
    }
    inline void MessageOfHome::_internal_set_x(int32_t value)
    {
        _impl_.x_ = value;
    }
    inline void MessageOfHome::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHome.x)
    }

    // int32 y = 2;
    inline void MessageOfHome::clear_y()
    {
        _impl_.y_ = 0;
    }
    inline int32_t MessageOfHome::_internal_y() const
    {
        return _impl_.y_;
    }
    inline int32_t MessageOfHome::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHome.y)
        return _internal_y();
    }
    inline void MessageOfHome::_internal_set_y(int32_t value)
    {
        _impl_.y_ = value;
    }
    inline void MessageOfHome::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHome.y)
    }

    // int32 hp = 3;
    inline void MessageOfHome::clear_hp()
    {
        _impl_.hp_ = 0;
    }
    inline int32_t MessageOfHome::_internal_hp() const
    {
        return _impl_.hp_;
    }
    inline int32_t MessageOfHome::hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHome.hp)
        return _internal_hp();
    }
    inline void MessageOfHome::_internal_set_hp(int32_t value)
    {
        _impl_.hp_ = value;
    }
    inline void MessageOfHome::set_hp(int32_t value)
    {
        _internal_set_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHome.hp)
    }

    // int64 team_id = 4;
    inline void MessageOfHome::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfHome::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfHome::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHome.team_id)
        return _internal_team_id();
    }
    inline void MessageOfHome::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfHome::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHome.team_id)
    }

    // -------------------------------------------------------------------

    // MessageOfMap_Row

    // repeated .protobuf.PlaceType cols = 1;
    inline int MessageOfMap_Row::_internal_cols_size() const
    {
        return _impl_.cols_.size();
    }
    inline int MessageOfMap_Row::cols_size() const
    {
        return _internal_cols_size();
    }
    inline void MessageOfMap_Row::clear_cols()
    {
        _impl_.cols_.Clear();
    }
    inline ::protobuf::PlaceType MessageOfMap_Row::_internal_cols(int index) const
    {
        return static_cast<::protobuf::PlaceType>(_impl_.cols_.Get(index));
    }
    inline ::protobuf::PlaceType MessageOfMap_Row::cols(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfMap.Row.cols)
        return _internal_cols(index);
    }
    inline void MessageOfMap_Row::set_cols(int index, ::protobuf::PlaceType value)
    {
        _impl_.cols_.Set(index, value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfMap.Row.cols)
    }
    inline void MessageOfMap_Row::_internal_add_cols(::protobuf::PlaceType value)
    {
        _impl_.cols_.Add(value);
    }
    inline void MessageOfMap_Row::add_cols(::protobuf::PlaceType value)
    {
        _internal_add_cols(value);
        // @@protoc_insertion_point(field_add:protobuf.MessageOfMap.Row.cols)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
        MessageOfMap_Row::cols() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageOfMap.Row.cols)
        return _impl_.cols_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfMap_Row::_internal_mutable_cols()
    {
        return &_impl_.cols_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfMap_Row::mutable_cols()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageOfMap.Row.cols)
        return _internal_mutable_cols();
    }

    // -------------------------------------------------------------------

    // MessageOfMap

    // uint32 height = 1;
    inline void MessageOfMap::clear_height()
    {
        _impl_.height_ = 0u;
    }
    inline uint32_t MessageOfMap::_internal_height() const
    {
        return _impl_.height_;
    }
    inline uint32_t MessageOfMap::height() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfMap.height)
        return _internal_height();
    }
    inline void MessageOfMap::_internal_set_height(uint32_t value)
    {
        _impl_.height_ = value;
    }
    inline void MessageOfMap::set_height(uint32_t value)
    {
        _internal_set_height(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfMap.height)
    }

    // uint32 width = 2;
    inline void MessageOfMap::clear_width()
    {
        _impl_.width_ = 0u;
    }
    inline uint32_t MessageOfMap::_internal_width() const
    {
        return _impl_.width_;
    }
    inline uint32_t MessageOfMap::width() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfMap.width)
        return _internal_width();
    }
    inline void MessageOfMap::_internal_set_width(uint32_t value)
    {
        _impl_.width_ = value;
    }
    inline void MessageOfMap::set_width(uint32_t value)
    {
        _internal_set_width(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfMap.width)
    }

    // repeated .protobuf.MessageOfMap.Row rows = 3;
    inline int MessageOfMap::_internal_rows_size() const
    {
        return _impl_.rows_.size();
    }
    inline int MessageOfMap::rows_size() const
    {
        return _internal_rows_size();
    }
    inline void MessageOfMap::clear_rows()
    {
        _impl_.rows_.Clear();
    }
    inline ::protobuf::MessageOfMap_Row* MessageOfMap::mutable_rows(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfMap.rows)
        return _impl_.rows_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>*
        MessageOfMap::mutable_rows()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageOfMap.rows)
        return &_impl_.rows_;
    }
    inline const ::protobuf::MessageOfMap_Row& MessageOfMap::_internal_rows(int index) const
    {
        return _impl_.rows_.Get(index);
    }
    inline const ::protobuf::MessageOfMap_Row& MessageOfMap::rows(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfMap.rows)
        return _internal_rows(index);
    }
    inline ::protobuf::MessageOfMap_Row* MessageOfMap::_internal_add_rows()
    {
        return _impl_.rows_.Add();
    }
    inline ::protobuf::MessageOfMap_Row* MessageOfMap::add_rows()
    {
        ::protobuf::MessageOfMap_Row* _add = _internal_add_rows();
        // @@protoc_insertion_point(field_add:protobuf.MessageOfMap.rows)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>&
        MessageOfMap::rows() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageOfMap.rows)
        return _impl_.rows_;
    }

    // -------------------------------------------------------------------

    // MessageOfTeam

    // int64 team_id = 1;
    inline void MessageOfTeam::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfTeam::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfTeam::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfTeam.team_id)
        return _internal_team_id();
    }
    inline void MessageOfTeam::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfTeam::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfTeam.team_id)
    }

    // int64 player_id = 2;
    inline void MessageOfTeam::clear_player_id()
    {
        _impl_.player_id_ = int64_t{0};
    }
    inline int64_t MessageOfTeam::_internal_player_id() const
    {
        return _impl_.player_id_;
    }
    inline int64_t MessageOfTeam::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfTeam.player_id)
        return _internal_player_id();
    }
    inline void MessageOfTeam::_internal_set_player_id(int64_t value)
    {
        _impl_.player_id_ = value;
    }
    inline void MessageOfTeam::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfTeam.player_id)
    }

    // int64 score = 3;
    inline void MessageOfTeam::clear_score()
    {
        _impl_.score_ = int64_t{0};
    }
    inline int64_t MessageOfTeam::_internal_score() const
    {
        return _impl_.score_;
    }
    inline int64_t MessageOfTeam::score() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfTeam.score)
        return _internal_score();
    }
    inline void MessageOfTeam::_internal_set_score(int64_t value)
    {
        _impl_.score_ = value;
    }
    inline void MessageOfTeam::set_score(int64_t value)
    {
        _internal_set_score(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfTeam.score)
    }

    // int64 energy = 4;
    inline void MessageOfTeam::clear_energy()
    {
        _impl_.energy_ = int64_t{0};
    }
    inline int64_t MessageOfTeam::_internal_energy() const
    {
        return _impl_.energy_;
    }
    inline int64_t MessageOfTeam::energy() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfTeam.energy)
        return _internal_energy();
    }
    inline void MessageOfTeam::_internal_set_energy(int64_t value)
    {
        _impl_.energy_ = value;
    }
    inline void MessageOfTeam::set_energy(int64_t value)
    {
        _internal_set_energy(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfTeam.energy)
    }

    // -------------------------------------------------------------------

    // MessageOfObj

    // .protobuf.MessageOfShip ship_message = 1;
    inline bool MessageOfObj::_internal_has_ship_message() const
    {
        return message_of_obj_case() == kShipMessage;
    }
    inline bool MessageOfObj::has_ship_message() const
    {
        return _internal_has_ship_message();
    }
    inline void MessageOfObj::set_has_ship_message()
    {
        _impl_._oneof_case_[0] = kShipMessage;
    }
    inline void MessageOfObj::clear_ship_message()
    {
        if (_internal_has_ship_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.ship_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfShip* MessageOfObj::release_ship_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.ship_message)
        if (_internal_has_ship_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfShip* temp = _impl_.message_of_obj_.ship_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.ship_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfShip& MessageOfObj::_internal_ship_message() const
    {
        return _internal_has_ship_message() ? *_impl_.message_of_obj_.ship_message_ : reinterpret_cast<::protobuf::MessageOfShip&>(::protobuf::_MessageOfShip_default_instance_);
    }
    inline const ::protobuf::MessageOfShip& MessageOfObj::ship_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.ship_message)
        return _internal_ship_message();
    }
    inline ::protobuf::MessageOfShip* MessageOfObj::unsafe_arena_release_ship_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.ship_message)
        if (_internal_has_ship_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfShip* temp = _impl_.message_of_obj_.ship_message_;
            _impl_.message_of_obj_.ship_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_ship_message(::protobuf::MessageOfShip* ship_message)
    {
        clear_message_of_obj();
        if (ship_message)
        {
            set_has_ship_message();
            _impl_.message_of_obj_.ship_message_ = ship_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.ship_message)
    }
    inline ::protobuf::MessageOfShip* MessageOfObj::_internal_mutable_ship_message()
    {
        if (!_internal_has_ship_message())
        {
            clear_message_of_obj();
            set_has_ship_message();
            _impl_.message_of_obj_.ship_message_ = CreateMaybeMessage<::protobuf::MessageOfShip>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.ship_message_;
    }
    inline ::protobuf::MessageOfShip* MessageOfObj::mutable_ship_message()
    {
        ::protobuf::MessageOfShip* _msg = _internal_mutable_ship_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.ship_message)
        return _msg;
    }

    // .protobuf.MessageOfBullet bullet_message = 2;
    inline bool MessageOfObj::_internal_has_bullet_message() const
    {
        return message_of_obj_case() == kBulletMessage;
    }
    inline bool MessageOfObj::has_bullet_message() const
    {
        return _internal_has_bullet_message();
    }
    inline void MessageOfObj::set_has_bullet_message()
    {
        _impl_._oneof_case_[0] = kBulletMessage;
    }
    inline void MessageOfObj::clear_bullet_message()
    {
        if (_internal_has_bullet_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.bullet_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfBullet* MessageOfObj::release_bullet_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.bullet_message)
        if (_internal_has_bullet_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfBullet* temp = _impl_.message_of_obj_.bullet_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.bullet_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfBullet& MessageOfObj::_internal_bullet_message() const
    {
        return _internal_has_bullet_message() ? *_impl_.message_of_obj_.bullet_message_ : reinterpret_cast<::protobuf::MessageOfBullet&>(::protobuf::_MessageOfBullet_default_instance_);
    }
    inline const ::protobuf::MessageOfBullet& MessageOfObj::bullet_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.bullet_message)
        return _internal_bullet_message();
    }
    inline ::protobuf::MessageOfBullet* MessageOfObj::unsafe_arena_release_bullet_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.bullet_message)
        if (_internal_has_bullet_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfBullet* temp = _impl_.message_of_obj_.bullet_message_;
            _impl_.message_of_obj_.bullet_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_bullet_message(::protobuf::MessageOfBullet* bullet_message)
    {
        clear_message_of_obj();
        if (bullet_message)
        {
            set_has_bullet_message();
            _impl_.message_of_obj_.bullet_message_ = bullet_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.bullet_message)
    }
    inline ::protobuf::MessageOfBullet* MessageOfObj::_internal_mutable_bullet_message()
    {
        if (!_internal_has_bullet_message())
        {
            clear_message_of_obj();
            set_has_bullet_message();
            _impl_.message_of_obj_.bullet_message_ = CreateMaybeMessage<::protobuf::MessageOfBullet>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.bullet_message_;
    }
    inline ::protobuf::MessageOfBullet* MessageOfObj::mutable_bullet_message()
    {
        ::protobuf::MessageOfBullet* _msg = _internal_mutable_bullet_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.bullet_message)
        return _msg;
    }

    // .protobuf.MessageOfFactory factory_message = 3;
    inline bool MessageOfObj::_internal_has_factory_message() const
    {
        return message_of_obj_case() == kFactoryMessage;
    }
    inline bool MessageOfObj::has_factory_message() const
    {
        return _internal_has_factory_message();
    }
    inline void MessageOfObj::set_has_factory_message()
    {
        _impl_._oneof_case_[0] = kFactoryMessage;
    }
    inline void MessageOfObj::clear_factory_message()
    {
        if (_internal_has_factory_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.factory_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfFactory* MessageOfObj::release_factory_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.factory_message)
        if (_internal_has_factory_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfFactory* temp = _impl_.message_of_obj_.factory_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.factory_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfFactory& MessageOfObj::_internal_factory_message() const
    {
        return _internal_has_factory_message() ? *_impl_.message_of_obj_.factory_message_ : reinterpret_cast<::protobuf::MessageOfFactory&>(::protobuf::_MessageOfFactory_default_instance_);
    }
    inline const ::protobuf::MessageOfFactory& MessageOfObj::factory_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.factory_message)
        return _internal_factory_message();
    }
    inline ::protobuf::MessageOfFactory* MessageOfObj::unsafe_arena_release_factory_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.factory_message)
        if (_internal_has_factory_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfFactory* temp = _impl_.message_of_obj_.factory_message_;
            _impl_.message_of_obj_.factory_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_factory_message(::protobuf::MessageOfFactory* factory_message)
    {
        clear_message_of_obj();
        if (factory_message)
        {
            set_has_factory_message();
            _impl_.message_of_obj_.factory_message_ = factory_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.factory_message)
    }
    inline ::protobuf::MessageOfFactory* MessageOfObj::_internal_mutable_factory_message()
    {
        if (!_internal_has_factory_message())
        {
            clear_message_of_obj();
            set_has_factory_message();
            _impl_.message_of_obj_.factory_message_ = CreateMaybeMessage<::protobuf::MessageOfFactory>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.factory_message_;
    }
    inline ::protobuf::MessageOfFactory* MessageOfObj::mutable_factory_message()
    {
        ::protobuf::MessageOfFactory* _msg = _internal_mutable_factory_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.factory_message)
        return _msg;
    }

    // .protobuf.MessageOfCommunity community_message = 4;
    inline bool MessageOfObj::_internal_has_community_message() const
    {
        return message_of_obj_case() == kCommunityMessage;
    }
    inline bool MessageOfObj::has_community_message() const
    {
        return _internal_has_community_message();
    }
    inline void MessageOfObj::set_has_community_message()
    {
        _impl_._oneof_case_[0] = kCommunityMessage;
    }
    inline void MessageOfObj::clear_community_message()
    {
        if (_internal_has_community_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.community_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfCommunity* MessageOfObj::release_community_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.community_message)
        if (_internal_has_community_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfCommunity* temp = _impl_.message_of_obj_.community_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.community_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfCommunity& MessageOfObj::_internal_community_message() const
    {
        return _internal_has_community_message() ? *_impl_.message_of_obj_.community_message_ : reinterpret_cast<::protobuf::MessageOfCommunity&>(::protobuf::_MessageOfCommunity_default_instance_);
    }
    inline const ::protobuf::MessageOfCommunity& MessageOfObj::community_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.community_message)
        return _internal_community_message();
    }
    inline ::protobuf::MessageOfCommunity* MessageOfObj::unsafe_arena_release_community_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.community_message)
        if (_internal_has_community_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfCommunity* temp = _impl_.message_of_obj_.community_message_;
            _impl_.message_of_obj_.community_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_community_message(::protobuf::MessageOfCommunity* community_message)
    {
        clear_message_of_obj();
        if (community_message)
        {
            set_has_community_message();
            _impl_.message_of_obj_.community_message_ = community_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.community_message)
    }
    inline ::protobuf::MessageOfCommunity* MessageOfObj::_internal_mutable_community_message()
    {
        if (!_internal_has_community_message())
        {
            clear_message_of_obj();
            set_has_community_message();
            _impl_.message_of_obj_.community_message_ = CreateMaybeMessage<::protobuf::MessageOfCommunity>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.community_message_;
    }
    inline ::protobuf::MessageOfCommunity* MessageOfObj::mutable_community_message()
    {
        ::protobuf::MessageOfCommunity* _msg = _internal_mutable_community_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.community_message)
        return _msg;
    }

    // .protobuf.MessageOfFort fort_message = 5;
    inline bool MessageOfObj::_internal_has_fort_message() const
    {
        return message_of_obj_case() == kFortMessage;
    }
    inline bool MessageOfObj::has_fort_message() const
    {
        return _internal_has_fort_message();
    }
    inline void MessageOfObj::set_has_fort_message()
    {
        _impl_._oneof_case_[0] = kFortMessage;
    }
    inline void MessageOfObj::clear_fort_message()
    {
        if (_internal_has_fort_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.fort_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfFort* MessageOfObj::release_fort_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.fort_message)
        if (_internal_has_fort_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfFort* temp = _impl_.message_of_obj_.fort_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.fort_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfFort& MessageOfObj::_internal_fort_message() const
    {
        return _internal_has_fort_message() ? *_impl_.message_of_obj_.fort_message_ : reinterpret_cast<::protobuf::MessageOfFort&>(::protobuf::_MessageOfFort_default_instance_);
    }
    inline const ::protobuf::MessageOfFort& MessageOfObj::fort_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.fort_message)
        return _internal_fort_message();
    }
    inline ::protobuf::MessageOfFort* MessageOfObj::unsafe_arena_release_fort_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.fort_message)
        if (_internal_has_fort_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfFort* temp = _impl_.message_of_obj_.fort_message_;
            _impl_.message_of_obj_.fort_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_fort_message(::protobuf::MessageOfFort* fort_message)
    {
        clear_message_of_obj();
        if (fort_message)
        {
            set_has_fort_message();
            _impl_.message_of_obj_.fort_message_ = fort_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.fort_message)
    }
    inline ::protobuf::MessageOfFort* MessageOfObj::_internal_mutable_fort_message()
    {
        if (!_internal_has_fort_message())
        {
            clear_message_of_obj();
            set_has_fort_message();
            _impl_.message_of_obj_.fort_message_ = CreateMaybeMessage<::protobuf::MessageOfFort>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.fort_message_;
    }
    inline ::protobuf::MessageOfFort* MessageOfObj::mutable_fort_message()
    {
        ::protobuf::MessageOfFort* _msg = _internal_mutable_fort_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.fort_message)
        return _msg;
    }

    // .protobuf.MessageOfWormhole wormhole_message = 6;
    inline bool MessageOfObj::_internal_has_wormhole_message() const
    {
        return message_of_obj_case() == kWormholeMessage;
    }
    inline bool MessageOfObj::has_wormhole_message() const
    {
        return _internal_has_wormhole_message();
    }
    inline void MessageOfObj::set_has_wormhole_message()
    {
        _impl_._oneof_case_[0] = kWormholeMessage;
    }
    inline void MessageOfObj::clear_wormhole_message()
    {
        if (_internal_has_wormhole_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.wormhole_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfWormhole* MessageOfObj::release_wormhole_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.wormhole_message)
        if (_internal_has_wormhole_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfWormhole* temp = _impl_.message_of_obj_.wormhole_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.wormhole_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfWormhole& MessageOfObj::_internal_wormhole_message() const
    {
        return _internal_has_wormhole_message() ? *_impl_.message_of_obj_.wormhole_message_ : reinterpret_cast<::protobuf::MessageOfWormhole&>(::protobuf::_MessageOfWormhole_default_instance_);
    }
    inline const ::protobuf::MessageOfWormhole& MessageOfObj::wormhole_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.wormhole_message)
        return _internal_wormhole_message();
    }
    inline ::protobuf::MessageOfWormhole* MessageOfObj::unsafe_arena_release_wormhole_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.wormhole_message)
        if (_internal_has_wormhole_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfWormhole* temp = _impl_.message_of_obj_.wormhole_message_;
            _impl_.message_of_obj_.wormhole_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_wormhole_message(::protobuf::MessageOfWormhole* wormhole_message)
    {
        clear_message_of_obj();
        if (wormhole_message)
        {
            set_has_wormhole_message();
            _impl_.message_of_obj_.wormhole_message_ = wormhole_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.wormhole_message)
    }
    inline ::protobuf::MessageOfWormhole* MessageOfObj::_internal_mutable_wormhole_message()
    {
        if (!_internal_has_wormhole_message())
        {
            clear_message_of_obj();
            set_has_wormhole_message();
            _impl_.message_of_obj_.wormhole_message_ = CreateMaybeMessage<::protobuf::MessageOfWormhole>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.wormhole_message_;
    }
    inline ::protobuf::MessageOfWormhole* MessageOfObj::mutable_wormhole_message()
    {
        ::protobuf::MessageOfWormhole* _msg = _internal_mutable_wormhole_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.wormhole_message)
        return _msg;
    }

    // .protobuf.MessageOfHome home_message = 7;
    inline bool MessageOfObj::_internal_has_home_message() const
    {
        return message_of_obj_case() == kHomeMessage;
    }
    inline bool MessageOfObj::has_home_message() const
    {
        return _internal_has_home_message();
    }
    inline void MessageOfObj::set_has_home_message()
    {
        _impl_._oneof_case_[0] = kHomeMessage;
    }
    inline void MessageOfObj::clear_home_message()
    {
        if (_internal_has_home_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.home_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfHome* MessageOfObj::release_home_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.home_message)
        if (_internal_has_home_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfHome* temp = _impl_.message_of_obj_.home_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.home_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfHome& MessageOfObj::_internal_home_message() const
    {
        return _internal_has_home_message() ? *_impl_.message_of_obj_.home_message_ : reinterpret_cast<::protobuf::MessageOfHome&>(::protobuf::_MessageOfHome_default_instance_);
    }
    inline const ::protobuf::MessageOfHome& MessageOfObj::home_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.home_message)
        return _internal_home_message();
    }
    inline ::protobuf::MessageOfHome* MessageOfObj::unsafe_arena_release_home_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.home_message)
        if (_internal_has_home_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfHome* temp = _impl_.message_of_obj_.home_message_;
            _impl_.message_of_obj_.home_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_home_message(::protobuf::MessageOfHome* home_message)
    {
        clear_message_of_obj();
        if (home_message)
        {
            set_has_home_message();
            _impl_.message_of_obj_.home_message_ = home_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.home_message)
    }
    inline ::protobuf::MessageOfHome* MessageOfObj::_internal_mutable_home_message()
    {
        if (!_internal_has_home_message())
        {
            clear_message_of_obj();
            set_has_home_message();
            _impl_.message_of_obj_.home_message_ = CreateMaybeMessage<::protobuf::MessageOfHome>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.home_message_;
    }
    inline ::protobuf::MessageOfHome* MessageOfObj::mutable_home_message()
    {
        ::protobuf::MessageOfHome* _msg = _internal_mutable_home_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.home_message)
        return _msg;
    }

    // .protobuf.MessageOfResource resource_message = 8;
    inline bool MessageOfObj::_internal_has_resource_message() const
    {
        return message_of_obj_case() == kResourceMessage;
    }
    inline bool MessageOfObj::has_resource_message() const
    {
        return _internal_has_resource_message();
    }
    inline void MessageOfObj::set_has_resource_message()
    {
        _impl_._oneof_case_[0] = kResourceMessage;
    }
    inline void MessageOfObj::clear_resource_message()
    {
        if (_internal_has_resource_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.resource_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfResource* MessageOfObj::release_resource_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.resource_message)
        if (_internal_has_resource_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfResource* temp = _impl_.message_of_obj_.resource_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.resource_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfResource& MessageOfObj::_internal_resource_message() const
    {
        return _internal_has_resource_message() ? *_impl_.message_of_obj_.resource_message_ : reinterpret_cast<::protobuf::MessageOfResource&>(::protobuf::_MessageOfResource_default_instance_);
    }
    inline const ::protobuf::MessageOfResource& MessageOfObj::resource_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.resource_message)
        return _internal_resource_message();
    }
    inline ::protobuf::MessageOfResource* MessageOfObj::unsafe_arena_release_resource_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.resource_message)
        if (_internal_has_resource_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfResource* temp = _impl_.message_of_obj_.resource_message_;
            _impl_.message_of_obj_.resource_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_resource_message(::protobuf::MessageOfResource* resource_message)
    {
        clear_message_of_obj();
        if (resource_message)
        {
            set_has_resource_message();
            _impl_.message_of_obj_.resource_message_ = resource_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.resource_message)
    }
    inline ::protobuf::MessageOfResource* MessageOfObj::_internal_mutable_resource_message()
    {
        if (!_internal_has_resource_message())
        {
            clear_message_of_obj();
            set_has_resource_message();
            _impl_.message_of_obj_.resource_message_ = CreateMaybeMessage<::protobuf::MessageOfResource>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.resource_message_;
    }
    inline ::protobuf::MessageOfResource* MessageOfObj::mutable_resource_message()
    {
        ::protobuf::MessageOfResource* _msg = _internal_mutable_resource_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.resource_message)
        return _msg;
    }

    // .protobuf.MessageOfMap map_message = 9;
    inline bool MessageOfObj::_internal_has_map_message() const
    {
        return message_of_obj_case() == kMapMessage;
    }
    inline bool MessageOfObj::has_map_message() const
    {
        return _internal_has_map_message();
    }
    inline void MessageOfObj::set_has_map_message()
    {
        _impl_._oneof_case_[0] = kMapMessage;
    }
    inline void MessageOfObj::clear_map_message()
    {
        if (_internal_has_map_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.map_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfMap* MessageOfObj::release_map_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.map_message)
        if (_internal_has_map_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfMap* temp = _impl_.message_of_obj_.map_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.map_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfMap& MessageOfObj::_internal_map_message() const
    {
        return _internal_has_map_message() ? *_impl_.message_of_obj_.map_message_ : reinterpret_cast<::protobuf::MessageOfMap&>(::protobuf::_MessageOfMap_default_instance_);
    }
    inline const ::protobuf::MessageOfMap& MessageOfObj::map_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.map_message)
        return _internal_map_message();
    }
    inline ::protobuf::MessageOfMap* MessageOfObj::unsafe_arena_release_map_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.map_message)
        if (_internal_has_map_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfMap* temp = _impl_.message_of_obj_.map_message_;
            _impl_.message_of_obj_.map_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_map_message(::protobuf::MessageOfMap* map_message)
    {
        clear_message_of_obj();
        if (map_message)
        {
            set_has_map_message();
            _impl_.message_of_obj_.map_message_ = map_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.map_message)
    }
    inline ::protobuf::MessageOfMap* MessageOfObj::_internal_mutable_map_message()
    {
        if (!_internal_has_map_message())
        {
            clear_message_of_obj();
            set_has_map_message();
            _impl_.message_of_obj_.map_message_ = CreateMaybeMessage<::protobuf::MessageOfMap>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.map_message_;
    }
    inline ::protobuf::MessageOfMap* MessageOfObj::mutable_map_message()
    {
        ::protobuf::MessageOfMap* _msg = _internal_mutable_map_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.map_message)
        return _msg;
    }

    // .protobuf.MessageOfNews news_message = 10;
    inline bool MessageOfObj::_internal_has_news_message() const
    {
        return message_of_obj_case() == kNewsMessage;
    }
    inline bool MessageOfObj::has_news_message() const
    {
        return _internal_has_news_message();
    }
    inline void MessageOfObj::set_has_news_message()
    {
        _impl_._oneof_case_[0] = kNewsMessage;
    }
    inline void MessageOfObj::clear_news_message()
    {
        if (_internal_has_news_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.news_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfNews* MessageOfObj::release_news_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.news_message)
        if (_internal_has_news_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfNews* temp = _impl_.message_of_obj_.news_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.news_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfNews& MessageOfObj::_internal_news_message() const
    {
        return _internal_has_news_message() ? *_impl_.message_of_obj_.news_message_ : reinterpret_cast<::protobuf::MessageOfNews&>(::protobuf::_MessageOfNews_default_instance_);
    }
    inline const ::protobuf::MessageOfNews& MessageOfObj::news_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.news_message)
        return _internal_news_message();
    }
    inline ::protobuf::MessageOfNews* MessageOfObj::unsafe_arena_release_news_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.news_message)
        if (_internal_has_news_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfNews* temp = _impl_.message_of_obj_.news_message_;
            _impl_.message_of_obj_.news_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_news_message(::protobuf::MessageOfNews* news_message)
    {
        clear_message_of_obj();
        if (news_message)
        {
            set_has_news_message();
            _impl_.message_of_obj_.news_message_ = news_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.news_message)
    }
    inline ::protobuf::MessageOfNews* MessageOfObj::_internal_mutable_news_message()
    {
        if (!_internal_has_news_message())
        {
            clear_message_of_obj();
            set_has_news_message();
            _impl_.message_of_obj_.news_message_ = CreateMaybeMessage<::protobuf::MessageOfNews>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.news_message_;
    }
    inline ::protobuf::MessageOfNews* MessageOfObj::mutable_news_message()
    {
        ::protobuf::MessageOfNews* _msg = _internal_mutable_news_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.news_message)
        return _msg;
    }

    // .protobuf.MessageOfBombedBullet bombed_bullet_message = 11;
    inline bool MessageOfObj::_internal_has_bombed_bullet_message() const
    {
        return message_of_obj_case() == kBombedBulletMessage;
    }
    inline bool MessageOfObj::has_bombed_bullet_message() const
    {
        return _internal_has_bombed_bullet_message();
    }
    inline void MessageOfObj::set_has_bombed_bullet_message()
    {
        _impl_._oneof_case_[0] = kBombedBulletMessage;
    }
    inline void MessageOfObj::clear_bombed_bullet_message()
    {
        if (_internal_has_bombed_bullet_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.bombed_bullet_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfBombedBullet* MessageOfObj::release_bombed_bullet_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.bombed_bullet_message)
        if (_internal_has_bombed_bullet_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfBombedBullet* temp = _impl_.message_of_obj_.bombed_bullet_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.bombed_bullet_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfBombedBullet& MessageOfObj::_internal_bombed_bullet_message() const
    {
        return _internal_has_bombed_bullet_message() ? *_impl_.message_of_obj_.bombed_bullet_message_ : reinterpret_cast<::protobuf::MessageOfBombedBullet&>(::protobuf::_MessageOfBombedBullet_default_instance_);
    }
    inline const ::protobuf::MessageOfBombedBullet& MessageOfObj::bombed_bullet_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.bombed_bullet_message)
        return _internal_bombed_bullet_message();
    }
    inline ::protobuf::MessageOfBombedBullet* MessageOfObj::unsafe_arena_release_bombed_bullet_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.bombed_bullet_message)
        if (_internal_has_bombed_bullet_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfBombedBullet* temp = _impl_.message_of_obj_.bombed_bullet_message_;
            _impl_.message_of_obj_.bombed_bullet_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_bombed_bullet_message(::protobuf::MessageOfBombedBullet* bombed_bullet_message)
    {
        clear_message_of_obj();
        if (bombed_bullet_message)
        {
            set_has_bombed_bullet_message();
            _impl_.message_of_obj_.bombed_bullet_message_ = bombed_bullet_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.bombed_bullet_message)
    }
    inline ::protobuf::MessageOfBombedBullet* MessageOfObj::_internal_mutable_bombed_bullet_message()
    {
        if (!_internal_has_bombed_bullet_message())
        {
            clear_message_of_obj();
            set_has_bombed_bullet_message();
            _impl_.message_of_obj_.bombed_bullet_message_ = CreateMaybeMessage<::protobuf::MessageOfBombedBullet>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.bombed_bullet_message_;
    }
    inline ::protobuf::MessageOfBombedBullet* MessageOfObj::mutable_bombed_bullet_message()
    {
        ::protobuf::MessageOfBombedBullet* _msg = _internal_mutable_bombed_bullet_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.bombed_bullet_message)
        return _msg;
    }

    // .protobuf.MessageOfTeam team_message = 12;
    inline bool MessageOfObj::_internal_has_team_message() const
    {
        return message_of_obj_case() == kTeamMessage;
    }
    inline bool MessageOfObj::has_team_message() const
    {
        return _internal_has_team_message();
    }
    inline void MessageOfObj::set_has_team_message()
    {
        _impl_._oneof_case_[0] = kTeamMessage;
    }
    inline void MessageOfObj::clear_team_message()
    {
        if (_internal_has_team_message())
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete _impl_.message_of_obj_.team_message_;
            }
            clear_has_message_of_obj();
        }
    }
    inline ::protobuf::MessageOfTeam* MessageOfObj::release_team_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfObj.team_message)
        if (_internal_has_team_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfTeam* temp = _impl_.message_of_obj_.team_message_;
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
            _impl_.message_of_obj_.team_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline const ::protobuf::MessageOfTeam& MessageOfObj::_internal_team_message() const
    {
        return _internal_has_team_message() ? *_impl_.message_of_obj_.team_message_ : reinterpret_cast<::protobuf::MessageOfTeam&>(::protobuf::_MessageOfTeam_default_instance_);
    }
    inline const ::protobuf::MessageOfTeam& MessageOfObj::team_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfObj.team_message)
        return _internal_team_message();
    }
    inline ::protobuf::MessageOfTeam* MessageOfObj::unsafe_arena_release_team_message()
    {
        // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.MessageOfObj.team_message)
        if (_internal_has_team_message())
        {
            clear_has_message_of_obj();
            ::protobuf::MessageOfTeam* temp = _impl_.message_of_obj_.team_message_;
            _impl_.message_of_obj_.team_message_ = nullptr;
            return temp;
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfObj::unsafe_arena_set_allocated_team_message(::protobuf::MessageOfTeam* team_message)
    {
        clear_message_of_obj();
        if (team_message)
        {
            set_has_team_message();
            _impl_.message_of_obj_.team_message_ = team_message;
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageOfObj.team_message)
    }
    inline ::protobuf::MessageOfTeam* MessageOfObj::_internal_mutable_team_message()
    {
        if (!_internal_has_team_message())
        {
            clear_message_of_obj();
            set_has_team_message();
            _impl_.message_of_obj_.team_message_ = CreateMaybeMessage<::protobuf::MessageOfTeam>(GetArenaForAllocation());
        }
        return _impl_.message_of_obj_.team_message_;
    }
    inline ::protobuf::MessageOfTeam* MessageOfObj::mutable_team_message()
    {
        ::protobuf::MessageOfTeam* _msg = _internal_mutable_team_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfObj.team_message)
        return _msg;
    }

    inline bool MessageOfObj::has_message_of_obj() const
    {
        return message_of_obj_case() != MESSAGE_OF_OBJ_NOT_SET;
    }
    inline void MessageOfObj::clear_has_message_of_obj()
    {
        _impl_._oneof_case_[0] = MESSAGE_OF_OBJ_NOT_SET;
    }
    inline MessageOfObj::MessageOfObjCase MessageOfObj::message_of_obj_case() const
    {
        return MessageOfObj::MessageOfObjCase(_impl_._oneof_case_[0]);
    }
    // -------------------------------------------------------------------

    // MessageOfAll

    // int32 game_time = 1;
    inline void MessageOfAll::clear_game_time()
    {
        _impl_.game_time_ = 0;
    }
    inline int32_t MessageOfAll::_internal_game_time() const
    {
        return _impl_.game_time_;
    }
    inline int32_t MessageOfAll::game_time() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.game_time)
        return _internal_game_time();
    }
    inline void MessageOfAll::_internal_set_game_time(int32_t value)
    {
        _impl_.game_time_ = value;
    }
    inline void MessageOfAll::set_game_time(int32_t value)
    {
        _internal_set_game_time(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.game_time)
    }

    // int32 red_team_score = 2;
    inline void MessageOfAll::clear_red_team_score()
    {
        _impl_.red_team_score_ = 0;
    }
    inline int32_t MessageOfAll::_internal_red_team_score() const
    {
        return _impl_.red_team_score_;
    }
    inline int32_t MessageOfAll::red_team_score() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.red_team_score)
        return _internal_red_team_score();
    }
    inline void MessageOfAll::_internal_set_red_team_score(int32_t value)
    {
        _impl_.red_team_score_ = value;
    }
    inline void MessageOfAll::set_red_team_score(int32_t value)
    {
        _internal_set_red_team_score(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.red_team_score)
    }

    // int32 blue_team_score = 3;
    inline void MessageOfAll::clear_blue_team_score()
    {
        _impl_.blue_team_score_ = 0;
    }
    inline int32_t MessageOfAll::_internal_blue_team_score() const
    {
        return _impl_.blue_team_score_;
    }
    inline int32_t MessageOfAll::blue_team_score() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.blue_team_score)
        return _internal_blue_team_score();
    }
    inline void MessageOfAll::_internal_set_blue_team_score(int32_t value)
    {
        _impl_.blue_team_score_ = value;
    }
    inline void MessageOfAll::set_blue_team_score(int32_t value)
    {
        _internal_set_blue_team_score(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.blue_team_score)
    }

    // int32 red_team_energy = 4;
    inline void MessageOfAll::clear_red_team_energy()
    {
        _impl_.red_team_energy_ = 0;
    }
    inline int32_t MessageOfAll::_internal_red_team_energy() const
    {
        return _impl_.red_team_energy_;
    }
    inline int32_t MessageOfAll::red_team_energy() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.red_team_energy)
        return _internal_red_team_energy();
    }
    inline void MessageOfAll::_internal_set_red_team_energy(int32_t value)
    {
        _impl_.red_team_energy_ = value;
    }
    inline void MessageOfAll::set_red_team_energy(int32_t value)
    {
        _internal_set_red_team_energy(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.red_team_energy)
    }

    // int32 blue_team_energy = 5;
    inline void MessageOfAll::clear_blue_team_energy()
    {
        _impl_.blue_team_energy_ = 0;
    }
    inline int32_t MessageOfAll::_internal_blue_team_energy() const
    {
        return _impl_.blue_team_energy_;
    }
    inline int32_t MessageOfAll::blue_team_energy() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.blue_team_energy)
        return _internal_blue_team_energy();
    }
    inline void MessageOfAll::_internal_set_blue_team_energy(int32_t value)
    {
        _impl_.blue_team_energy_ = value;
    }
    inline void MessageOfAll::set_blue_team_energy(int32_t value)
    {
        _internal_set_blue_team_energy(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.blue_team_energy)
    }

    // int32 red_home_hp = 6;
    inline void MessageOfAll::clear_red_home_hp()
    {
        _impl_.red_home_hp_ = 0;
    }
    inline int32_t MessageOfAll::_internal_red_home_hp() const
    {
        return _impl_.red_home_hp_;
    }
    inline int32_t MessageOfAll::red_home_hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.red_home_hp)
        return _internal_red_home_hp();
    }
    inline void MessageOfAll::_internal_set_red_home_hp(int32_t value)
    {
        _impl_.red_home_hp_ = value;
    }
    inline void MessageOfAll::set_red_home_hp(int32_t value)
    {
        _internal_set_red_home_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.red_home_hp)
    }

    // int32 blue_home_hp = 7;
    inline void MessageOfAll::clear_blue_home_hp()
    {
        _impl_.blue_home_hp_ = 0;
    }
    inline int32_t MessageOfAll::_internal_blue_home_hp() const
    {
        return _impl_.blue_home_hp_;
    }
    inline int32_t MessageOfAll::blue_home_hp() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfAll.blue_home_hp)
        return _internal_blue_home_hp();
    }
    inline void MessageOfAll::_internal_set_blue_home_hp(int32_t value)
    {
        _impl_.blue_home_hp_ = value;
    }
    inline void MessageOfAll::set_blue_home_hp(int32_t value)
    {
        _internal_set_blue_home_hp(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfAll.blue_home_hp)
    }

    // -------------------------------------------------------------------

    // MessageToClient

    // repeated .protobuf.MessageOfObj obj_message = 1;
    inline int MessageToClient::_internal_obj_message_size() const
    {
        return _impl_.obj_message_.size();
    }
    inline int MessageToClient::obj_message_size() const
    {
        return _internal_obj_message_size();
    }
    inline void MessageToClient::clear_obj_message()
    {
        _impl_.obj_message_.Clear();
    }
    inline ::protobuf::MessageOfObj* MessageToClient::mutable_obj_message(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.MessageToClient.obj_message)
        return _impl_.obj_message_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfObj>*
        MessageToClient::mutable_obj_message()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageToClient.obj_message)
        return &_impl_.obj_message_;
    }
    inline const ::protobuf::MessageOfObj& MessageToClient::_internal_obj_message(int index) const
    {
        return _impl_.obj_message_.Get(index);
    }
    inline const ::protobuf::MessageOfObj& MessageToClient::obj_message(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.obj_message)
        return _internal_obj_message(index);
    }
    inline ::protobuf::MessageOfObj* MessageToClient::_internal_add_obj_message()
    {
        return _impl_.obj_message_.Add();
    }
    inline ::protobuf::MessageOfObj* MessageToClient::add_obj_message()
    {
        ::protobuf::MessageOfObj* _add = _internal_add_obj_message();
        // @@protoc_insertion_point(field_add:protobuf.MessageToClient.obj_message)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfObj>&
        MessageToClient::obj_message() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageToClient.obj_message)
        return _impl_.obj_message_;
    }

    // .protobuf.GameState game_state = 2;
    inline void MessageToClient::clear_game_state()
    {
        _impl_.game_state_ = 0;
    }
    inline ::protobuf::GameState MessageToClient::_internal_game_state() const
    {
        return static_cast<::protobuf::GameState>(_impl_.game_state_);
    }
    inline ::protobuf::GameState MessageToClient::game_state() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.game_state)
        return _internal_game_state();
    }
    inline void MessageToClient::_internal_set_game_state(::protobuf::GameState value)
    {
        _impl_.game_state_ = value;
    }
    inline void MessageToClient::set_game_state(::protobuf::GameState value)
    {
        _internal_set_game_state(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageToClient.game_state)
    }

    // .protobuf.MessageOfAll all_message = 3;
    inline bool MessageToClient::_internal_has_all_message() const
    {
        return this != internal_default_instance() && _impl_.all_message_ != nullptr;
    }
    inline bool MessageToClient::has_all_message() const
    {
        return _internal_has_all_message();
    }
    inline void MessageToClient::clear_all_message()
    {
        if (GetArenaForAllocation() == nullptr && _impl_.all_message_ != nullptr)
        {
            delete _impl_.all_message_;
        }
        _impl_.all_message_ = nullptr;
    }
    inline const ::protobuf::MessageOfAll& MessageToClient::_internal_all_message() const
    {
        const ::protobuf::MessageOfAll* p = _impl_.all_message_;
        return p != nullptr ? *p : reinterpret_cast<const ::protobuf::MessageOfAll&>(::protobuf::_MessageOfAll_default_instance_);
    }
    inline const ::protobuf::MessageOfAll& MessageToClient::all_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.all_message)
        return _internal_all_message();
    }
    inline void MessageToClient::unsafe_arena_set_allocated_all_message(
        ::protobuf::MessageOfAll* all_message
    )
    {
        if (GetArenaForAllocation() == nullptr)
        {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.all_message_);
        }
        _impl_.all_message_ = all_message;
        if (all_message)
        {
        }
        else
        {
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageToClient.all_message)
    }
    inline ::protobuf::MessageOfAll* MessageToClient::release_all_message()
    {
        ::protobuf::MessageOfAll* temp = _impl_.all_message_;
        _impl_.all_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr)
        {
            delete old;
        }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr)
        {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::protobuf::MessageOfAll* MessageToClient::unsafe_arena_release_all_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageToClient.all_message)

        ::protobuf::MessageOfAll* temp = _impl_.all_message_;
        _impl_.all_message_ = nullptr;
        return temp;
    }
    inline ::protobuf::MessageOfAll* MessageToClient::_internal_mutable_all_message()
    {
        if (_impl_.all_message_ == nullptr)
        {
            auto* p = CreateMaybeMessage<::protobuf::MessageOfAll>(GetArenaForAllocation());
            _impl_.all_message_ = p;
        }
        return _impl_.all_message_;
    }
    inline ::protobuf::MessageOfAll* MessageToClient::mutable_all_message()
    {
        ::protobuf::MessageOfAll* _msg = _internal_mutable_all_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageToClient.all_message)
        return _msg;
    }
    inline void MessageToClient::set_allocated_all_message(::protobuf::MessageOfAll* all_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr)
        {
            delete _impl_.all_message_;
        }
        if (all_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_message);
            if (message_arena != submessage_arena)
            {
                all_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, all_message, submessage_arena
                );
            }
        }
        else
        {
        }
        _impl_.all_message_ = all_message;
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageToClient.all_message)
    }

    // -------------------------------------------------------------------

    // MoveRes

    // int64 actual_speed = 1;
    inline void MoveRes::clear_actual_speed()
    {
        _impl_.actual_speed_ = int64_t{0};
    }
    inline int64_t MoveRes::_internal_actual_speed() const
    {
        return _impl_.actual_speed_;
    }
    inline int64_t MoveRes::actual_speed() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveRes.actual_speed)
        return _internal_actual_speed();
    }
    inline void MoveRes::_internal_set_actual_speed(int64_t value)
    {
        _impl_.actual_speed_ = value;
    }
    inline void MoveRes::set_actual_speed(int64_t value)
    {
        _internal_set_actual_speed(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveRes.actual_speed)
    }

    // double actual_angle = 2;
    inline void MoveRes::clear_actual_angle()
    {
        _impl_.actual_angle_ = 0;
    }
    inline double MoveRes::_internal_actual_angle() const
    {
        return _impl_.actual_angle_;
    }
    inline double MoveRes::actual_angle() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveRes.actual_angle)
        return _internal_actual_angle();
    }
    inline void MoveRes::_internal_set_actual_angle(double value)
    {
        _impl_.actual_angle_ = value;
    }
    inline void MoveRes::set_actual_angle(double value)
    {
        _internal_set_actual_angle(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveRes.actual_angle)
    }

    // bool act_success = 3;
    inline void MoveRes::clear_act_success()
    {
        _impl_.act_success_ = false;
    }
    inline bool MoveRes::_internal_act_success() const
    {
        return _impl_.act_success_;
    }
    inline bool MoveRes::act_success() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveRes.act_success)
        return _internal_act_success();
    }
    inline void MoveRes::_internal_set_act_success(bool value)
    {
        _impl_.act_success_ = value;
    }
    inline void MoveRes::set_act_success(bool value)
    {
        _internal_set_act_success(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveRes.act_success)
    }

    // -------------------------------------------------------------------

    // BuildShipRes

    // bool act_success = 1;
    inline void BuildShipRes::clear_act_success()
    {
        _impl_.act_success_ = false;
    }
    inline bool BuildShipRes::_internal_act_success() const
    {
        return _impl_.act_success_;
    }
    inline bool BuildShipRes::act_success() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildShipRes.act_success)
        return _internal_act_success();
    }
    inline void BuildShipRes::_internal_set_act_success(bool value)
    {
        _impl_.act_success_ = value;
    }
    inline void BuildShipRes::set_act_success(bool value)
    {
        _internal_set_act_success(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildShipRes.act_success)
    }

    // int64 player_id = 2;
    inline void BuildShipRes::clear_player_id()
    {
        _impl_.player_id_ = int64_t{0};
    }
    inline int64_t BuildShipRes::_internal_player_id() const
    {
        return _impl_.player_id_;
    }
    inline int64_t BuildShipRes::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildShipRes.player_id)
        return _internal_player_id();
    }
    inline void BuildShipRes::_internal_set_player_id(int64_t value)
    {
        _impl_.player_id_ = value;
    }
    inline void BuildShipRes::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildShipRes.player_id)
    }

    // -------------------------------------------------------------------

    // BoolRes

    // bool act_success = 1;
    inline void BoolRes::clear_act_success()
    {
        _impl_.act_success_ = false;
    }
    inline bool BoolRes::_internal_act_success() const
    {
        return _impl_.act_success_;
    }
    inline bool BoolRes::act_success() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BoolRes.act_success)
        return _internal_act_success();
    }
    inline void BoolRes::_internal_set_act_success(bool value)
    {
        _impl_.act_success_ = value;
    }
    inline void BoolRes::set_act_success(bool value)
    {
        _internal_set_act_success(value);
        // @@protoc_insertion_point(field_set:protobuf.BoolRes.act_success)
    }

    // -------------------------------------------------------------------

    // ShipInfoRes

    // repeated .protobuf.MessageOfShip ship_info = 1;
    inline int ShipInfoRes::_internal_ship_info_size() const
    {
        return _impl_.ship_info_.size();
    }
    inline int ShipInfoRes::ship_info_size() const
    {
        return _internal_ship_info_size();
    }
    inline void ShipInfoRes::clear_ship_info()
    {
        _impl_.ship_info_.Clear();
    }
    inline ::protobuf::MessageOfShip* ShipInfoRes::mutable_ship_info(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.ShipInfoRes.ship_info)
        return _impl_.ship_info_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfShip>*
        ShipInfoRes::mutable_ship_info()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.ShipInfoRes.ship_info)
        return &_impl_.ship_info_;
    }
    inline const ::protobuf::MessageOfShip& ShipInfoRes::_internal_ship_info(int index) const
    {
        return _impl_.ship_info_.Get(index);
    }
    inline const ::protobuf::MessageOfShip& ShipInfoRes::ship_info(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.ShipInfoRes.ship_info)
        return _internal_ship_info(index);
    }
    inline ::protobuf::MessageOfShip* ShipInfoRes::_internal_add_ship_info()
    {
        return _impl_.ship_info_.Add();
    }
    inline ::protobuf::MessageOfShip* ShipInfoRes::add_ship_info()
    {
        ::protobuf::MessageOfShip* _add = _internal_add_ship_info();
        // @@protoc_insertion_point(field_add:protobuf.ShipInfoRes.ship_info)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfShip>&
        ShipInfoRes::ship_info() const
    {
        // @@protoc_insertion_point(field_list:protobuf.ShipInfoRes.ship_info)
        return _impl_.ship_info_;
    }

    // -------------------------------------------------------------------

    // EcoRes

    // int64 economy = 1;
    inline void EcoRes::clear_economy()
    {
        _impl_.economy_ = int64_t{0};
    }
    inline int64_t EcoRes::_internal_economy() const
    {
        return _impl_.economy_;
    }
    inline int64_t EcoRes::economy() const
    {
        // @@protoc_insertion_point(field_get:protobuf.EcoRes.economy)
        return _internal_economy();
    }
    inline void EcoRes::_internal_set_economy(int64_t value)
    {
        _impl_.economy_ = value;
    }
    inline void EcoRes::set_economy(int64_t value)
    {
        _internal_set_economy(value);
        // @@protoc_insertion_point(field_set:protobuf.EcoRes.economy)
    }

    // -------------------------------------------------------------------

    // MessageOfNews

    // string text_message = 1;
    inline bool MessageOfNews::_internal_has_text_message() const
    {
        return news_case() == kTextMessage;
    }
    inline bool MessageOfNews::has_text_message() const
    {
        return _internal_has_text_message();
    }
    inline void MessageOfNews::set_has_text_message()
    {
        _impl_._oneof_case_[0] = kTextMessage;
    }
    inline void MessageOfNews::clear_text_message()
    {
        if (_internal_has_text_message())
        {
            _impl_.news_.text_message_.Destroy();
            clear_has_news();
        }
    }
    inline const std::string& MessageOfNews::text_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfNews.text_message)
        return _internal_text_message();
    }
    template<typename ArgT0, typename... ArgT>
    inline void MessageOfNews::set_text_message(ArgT0&& arg0, ArgT... args)
    {
        if (!_internal_has_text_message())
        {
            clear_news();
            set_has_text_message();
            _impl_.news_.text_message_.InitDefault();
        }
        _impl_.news_.text_message_.Set(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:protobuf.MessageOfNews.text_message)
    }
    inline std::string* MessageOfNews::mutable_text_message()
    {
        std::string* _s = _internal_mutable_text_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfNews.text_message)
        return _s;
    }
    inline const std::string& MessageOfNews::_internal_text_message() const
    {
        if (_internal_has_text_message())
        {
            return _impl_.news_.text_message_.Get();
        }
        return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
    }
    inline void MessageOfNews::_internal_set_text_message(const std::string& value)
    {
        if (!_internal_has_text_message())
        {
            clear_news();
            set_has_text_message();
            _impl_.news_.text_message_.InitDefault();
        }
        _impl_.news_.text_message_.Set(value, GetArenaForAllocation());
    }
    inline std::string* MessageOfNews::_internal_mutable_text_message()
    {
        if (!_internal_has_text_message())
        {
            clear_news();
            set_has_text_message();
            _impl_.news_.text_message_.InitDefault();
        }
        return _impl_.news_.text_message_.Mutable(GetArenaForAllocation());
    }
    inline std::string* MessageOfNews::release_text_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfNews.text_message)
        if (_internal_has_text_message())
        {
            clear_has_news();
            return _impl_.news_.text_message_.Release();
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfNews::set_allocated_text_message(std::string* text_message)
    {
        if (has_news())
        {
            clear_news();
        }
        if (text_message != nullptr)
        {
            set_has_text_message();
            _impl_.news_.text_message_.InitAllocated(text_message, GetArenaForAllocation());
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfNews.text_message)
    }

    // bytes binary_message = 2;
    inline bool MessageOfNews::_internal_has_binary_message() const
    {
        return news_case() == kBinaryMessage;
    }
    inline bool MessageOfNews::has_binary_message() const
    {
        return _internal_has_binary_message();
    }
    inline void MessageOfNews::set_has_binary_message()
    {
        _impl_._oneof_case_[0] = kBinaryMessage;
    }
    inline void MessageOfNews::clear_binary_message()
    {
        if (_internal_has_binary_message())
        {
            _impl_.news_.binary_message_.Destroy();
            clear_has_news();
        }
    }
    inline const std::string& MessageOfNews::binary_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfNews.binary_message)
        return _internal_binary_message();
    }
    template<typename ArgT0, typename... ArgT>
    inline void MessageOfNews::set_binary_message(ArgT0&& arg0, ArgT... args)
    {
        if (!_internal_has_binary_message())
        {
            clear_news();
            set_has_binary_message();
            _impl_.news_.binary_message_.InitDefault();
        }
        _impl_.news_.binary_message_.SetBytes(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:protobuf.MessageOfNews.binary_message)
    }
    inline std::string* MessageOfNews::mutable_binary_message()
    {
        std::string* _s = _internal_mutable_binary_message();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfNews.binary_message)
        return _s;
    }
    inline const std::string& MessageOfNews::_internal_binary_message() const
    {
        if (_internal_has_binary_message())
        {
            return _impl_.news_.binary_message_.Get();
        }
        return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
    }
    inline void MessageOfNews::_internal_set_binary_message(const std::string& value)
    {
        if (!_internal_has_binary_message())
        {
            clear_news();
            set_has_binary_message();
            _impl_.news_.binary_message_.InitDefault();
        }
        _impl_.news_.binary_message_.Set(value, GetArenaForAllocation());
    }
    inline std::string* MessageOfNews::_internal_mutable_binary_message()
    {
        if (!_internal_has_binary_message())
        {
            clear_news();
            set_has_binary_message();
            _impl_.news_.binary_message_.InitDefault();
        }
        return _impl_.news_.binary_message_.Mutable(GetArenaForAllocation());
    }
    inline std::string* MessageOfNews::release_binary_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageOfNews.binary_message)
        if (_internal_has_binary_message())
        {
            clear_has_news();
            return _impl_.news_.binary_message_.Release();
        }
        else
        {
            return nullptr;
        }
    }
    inline void MessageOfNews::set_allocated_binary_message(std::string* binary_message)
    {
        if (has_news())
        {
            clear_news();
        }
        if (binary_message != nullptr)
        {
            set_has_binary_message();
            _impl_.news_.binary_message_.InitAllocated(binary_message, GetArenaForAllocation());
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfNews.binary_message)
    }

    // int64 from_id = 3;
    inline void MessageOfNews::clear_from_id()
    {
        _impl_.from_id_ = int64_t{0};
    }
    inline int64_t MessageOfNews::_internal_from_id() const
    {
        return _impl_.from_id_;
    }
    inline int64_t MessageOfNews::from_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfNews.from_id)
        return _internal_from_id();
    }
    inline void MessageOfNews::_internal_set_from_id(int64_t value)
    {
        _impl_.from_id_ = value;
    }
    inline void MessageOfNews::set_from_id(int64_t value)
    {
        _internal_set_from_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfNews.from_id)
    }

    // int64 to_id = 4;
    inline void MessageOfNews::clear_to_id()
    {
        _impl_.to_id_ = int64_t{0};
    }
    inline int64_t MessageOfNews::_internal_to_id() const
    {
        return _impl_.to_id_;
    }
    inline int64_t MessageOfNews::to_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfNews.to_id)
        return _internal_to_id();
    }
    inline void MessageOfNews::_internal_set_to_id(int64_t value)
    {
        _impl_.to_id_ = value;
    }
    inline void MessageOfNews::set_to_id(int64_t value)
    {
        _internal_set_to_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfNews.to_id)
    }

    // int64 team_id = 5;
    inline void MessageOfNews::clear_team_id()
    {
        _impl_.team_id_ = int64_t{0};
    }
    inline int64_t MessageOfNews::_internal_team_id() const
    {
        return _impl_.team_id_;
    }
    inline int64_t MessageOfNews::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfNews.team_id)
        return _internal_team_id();
    }
    inline void MessageOfNews::_internal_set_team_id(int64_t value)
    {
        _impl_.team_id_ = value;
    }
    inline void MessageOfNews::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfNews.team_id)
    }

    inline bool MessageOfNews::has_news() const
    {
        return news_case() != NEWS_NOT_SET;
    }
    inline void MessageOfNews::clear_has_news()
    {
        _impl_._oneof_case_[0] = NEWS_NOT_SET;
    }
    inline MessageOfNews::NewsCase MessageOfNews::news_case() const
    {
        return MessageOfNews::NewsCase(_impl_._oneof_case_[0]);
    }
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message2Clients_2eproto
